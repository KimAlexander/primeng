{"version":3,"sources":["ng://primeng/gmap/gmap.ts"],"names":["GMap","el","differs","cd","zone","this","onMapClick","EventEmitter","onOverlayClick","onOverlayDblClick","onOverlayDragStart","onOverlayDrag","onOverlayDragEnd","onMapReady","onMapDragEnd","onZoomChanged","differ","find","create","prototype","ngAfterViewChecked","map","nativeElement","offsetParent","initialize","_this","google","maps","Map","children","options","emit","overlays","_b","__values","_c","next","done","overlay","value","setMap","bindOverlayEvents","addListener","event","run","originalEvent","getDraggable","bindDragEvents","ngDoCheck","changes","diff","forEachRemovedItem","record","clearInstanceListeners","item","forEachAddedItem","getMap","ElementRef","IterableDiffers","ChangeDetectorRef","NgZone","__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","GMapModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewChecked,DoCheck,Input,Output,EventEmitter,IterableDiffers,ChangeDetectorRef,NgZone,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\ndeclare var google: any;\r\n\r\n@Component({\r\n    selector: 'p-gmap',\r\n    template: `<div [ngStyle]=\"style\" [class]=\"styleClass\"></div>`,\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GMap implements AfterViewChecked,DoCheck {\r\n\r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() options: any;\r\n    \r\n    @Input() overlays: any[];\r\n    \r\n    @Output() onMapClick: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onOverlayClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onOverlayDblClick: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onOverlayDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onOverlayDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onOverlayDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onMapReady: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onMapDragEnd: EventEmitter<any> = new EventEmitter();\r\n   \r\n    @Output() onZoomChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n    differ: any;\r\n    \r\n    map: any;\r\n\r\n    constructor(public el: ElementRef,differs: IterableDiffers, public cd: ChangeDetectorRef, public zone:NgZone) {\r\n        this.differ = differs.find([]).create(null);\r\n    }\r\n    \r\n    ngAfterViewChecked() {\r\n        if (!this.map && this.el.nativeElement.offsetParent) {\r\n            this.initialize();\r\n        }\r\n    }\r\n    \r\n    initialize() {\r\n        this.map = new google.maps.Map(this.el.nativeElement.children[0], this.options);\r\n        this.onMapReady.emit({\r\n            map: this.map\r\n        });\r\n        \r\n        if (this.overlays) {\r\n            for(let overlay of this.overlays) {\r\n                overlay.setMap(this.map);\r\n                this.bindOverlayEvents(overlay);\r\n            }\r\n        }\r\n        \r\n        this.map.addListener('click', (event) => {\r\n            this.zone.run(() => {\r\n                this.onMapClick.emit(event);\r\n            });\r\n        });\r\n\r\n        this.map.addListener('dragend', (event) => {\r\n            this.zone.run(() => {\r\n                this.onMapDragEnd.emit(event);\r\n            });\r\n        });\r\n\r\n        this.map.addListener('zoom_changed', (event) => {\r\n            this.zone.run(() => {\r\n                this.onZoomChanged.emit(event);\r\n            });\r\n        });\r\n    }\r\n    \r\n    bindOverlayEvents(overlay: any) {\r\n        overlay.addListener('click', (event) => {\r\n            this.zone.run(() => {\r\n                this.onOverlayClick.emit({\r\n                    originalEvent: event,\r\n                    'overlay': overlay,\r\n                    map: this.map\r\n                });\r\n            });\r\n        });\r\n\r\n        overlay.addListener('dblclick', (event) => {\r\n            this.zone.run(() => {\r\n                this.onOverlayDblClick.emit({\r\n                    originalEvent: event,\r\n                    'overlay': overlay,\r\n                    map: this.map\r\n                });\r\n            });\r\n        });\r\n        \r\n        if (overlay.getDraggable()) {\r\n            this.bindDragEvents(overlay);\r\n        }\r\n    }\r\n    \r\n    ngDoCheck() {\r\n        let changes = this.differ.diff(this.overlays);\r\n        \r\n        if (changes && this.map) {\r\n            changes.forEachRemovedItem((record) => {\r\n                google.maps.event.clearInstanceListeners(record.item);\r\n                record.item.setMap(null);\r\n            });\r\n\r\n            changes.forEachAddedItem((record) => {\r\n                record.item.setMap(this.map);\r\n                record.item.addListener('click', (event) => {\r\n                    this.zone.run(() => {\r\n                        this.onOverlayClick.emit({\r\n                            originalEvent: event,\r\n                            overlay: record.item,\r\n                            map: this.map\r\n                        });\r\n                    });\r\n                });\r\n                \r\n                if (record.item.getDraggable()) {\r\n                    this.bindDragEvents(record.item);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    bindDragEvents(overlay) {\r\n        overlay.addListener('dragstart', (event) => {\r\n            this.zone.run(() => {\r\n                this.onOverlayDragStart.emit({\r\n                    originalEvent: event,\r\n                    overlay: overlay,\r\n                    map: this.map\r\n                });\r\n            });\r\n        });\r\n        \r\n        overlay.addListener('drag', (event) => {\r\n            this.zone.run(() => {\r\n                this.onOverlayDrag.emit({\r\n                    originalEvent: event,\r\n                    overlay: overlay,\r\n                    map: this.map\r\n                });\r\n            });\r\n        });\r\n        \r\n        overlay.addListener('dragend', (event) => {\r\n            this.zone.run(() => {\r\n                this.onOverlayDragEnd.emit({\r\n                    originalEvent: event,\r\n                    overlay: overlay,\r\n                    map: this.map\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    getMap() {\r\n        return this.map;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [GMap],\r\n    declarations: [GMap]\r\n})\r\nexport class GMapModule { }"]}