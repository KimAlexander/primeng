{"version":3,"sources":["ng://primeng/selectbutton/selectbutton.ts"],"names":["SELECTBUTTON_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","SelectButton","multi","cd","this","tabindex","onOptionClick","EventEmitter","onChange","onModelChange","onModelTouched","Object","defineProperty","prototype","_options","val","ngOnChanges","simpleChange","options","optionLabel","ObjectUtils","generateSelectItems","currentValue","writeValue","value","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onItemClick","event","option","index","multiple","itemIndex_1","findItemIndex","filter","i","__spread","emit","originalEvent","onFocus","focusedItem","target","onBlur","isSelected","equals","dataKey","length","ChangeDetectorRef","__decorate","Input","Output","ContentChild","TemplateRef","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","SelectButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef,SimpleChanges,OnChanges,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SelectItem} from 'primeng/api';\r\nimport {ObjectUtils} from 'primeng/utils';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const SELECTBUTTON_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => SelectButton),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-selectButton',\r\n    template: `\r\n        <div [ngClass]=\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + (options ? options.length : 0)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"group\">\r\n            <div *ngFor=\"let option of options; let i = index\" #btn class=\"ui-button ui-widget ui-state-default ui-button-text-only {{option.styleClass}}\"  role=\"button\" [attr.aria-pressed]=\"isSelected(option)\"\r\n                [ngClass]=\"{'ui-state-active':isSelected(option), 'ui-state-disabled': disabled || option.disabled, 'ui-state-focus': btn == focusedItem, \r\n                'ui-button-text-icon-left': (option.icon != null), 'ui-button-icon-only': (option.icon && !option.label)}\" (click)=\"onItemClick($event,option,i)\" (keydown.enter)=\"onItemClick($event,option,i)\"\r\n                [attr.title]=\"option.title\" [attr.aria-label]=\"option.label\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\">\r\n                <ng-container *ngIf=\"!itemTemplate else customcontent\">\r\n                    <span [ngClass]=\"['ui-clickable', 'ui-button-icon-left']\" [class]=\"option.icon\" *ngIf=\"option.icon\"></span>\r\n                    <span class=\"ui-button-text ui-clickable\">{{option.label||'ui-btn'}}</span>\r\n                </ng-container>\r\n                <ng-template #customcontent>\r\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n    `,\r\n    providers: [SELECTBUTTON_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class SelectButton implements ControlValueAccessor, OnChanges {\r\n\r\n    @Input() tabindex: number = 0;\r\n\r\n    @Input() multiple: boolean;\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() dataKey: string\r\n    \r\n    @Input() optionLabel: string;\r\n    \r\n    @Output() onOptionClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChild(TemplateRef) itemTemplate;\r\n    \r\n    value: any;\r\n    \r\n    focusedItem: HTMLDivElement;\r\n    \r\n    _options: any[];\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    constructor(private cd: ChangeDetectorRef) {}\r\n    \r\n    @Input() get options(): any[] {\r\n        return this._options;\r\n    }\r\n\r\n    set options(val: any[]) {\r\n        //NoOp\r\n    }\r\n\r\n    ngOnChanges(simpleChange: SimpleChanges) {\r\n        if (simpleChange.options) {\r\n            this._options = this.optionLabel ? ObjectUtils.generateSelectItems(simpleChange.options.currentValue, this.optionLabel) : simpleChange.options.currentValue;\r\n        }\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    onItemClick(event, option: SelectItem, index: number) {\r\n        if (this.disabled || option.disabled) {\r\n            return;\r\n        }\r\n                \r\n        if (this.multiple) {\r\n            let itemIndex = this.findItemIndex(option);\r\n            if (itemIndex != -1)\r\n                this.value = this.value.filter((val,i) => i!=itemIndex);\r\n            else\r\n                this.value = [...this.value||[], option.value];\r\n        }\r\n        else {\r\n            this.value = option.value;\r\n        }\r\n        \r\n        this.onOptionClick.emit({\r\n            originalEvent: event,\r\n            option: option,\r\n            index: index\r\n        });\r\n        \r\n        this.onModelChange(this.value);\r\n        \r\n        this.onChange.emit({\r\n            originalEvent: event,\r\n            value: this.value\r\n        });\r\n    }\r\n    \r\n    onFocus(event: Event) {\r\n        this.focusedItem = <HTMLDivElement> event.target;\r\n    }\r\n    \r\n    onBlur(event) {\r\n        this.focusedItem = null;\r\n        this.onModelTouched();\r\n    }\r\n    \r\n    isSelected(option: SelectItem) {\r\n        if (this.multiple)\r\n            return this.findItemIndex(option) != -1;\r\n        else\r\n            return ObjectUtils.equals(option.value, this.value, this.dataKey);\r\n    }\r\n    \r\n    findItemIndex(option: SelectItem) {\r\n        let index = -1;\r\n        if (this.value) {\r\n            for(let i = 0; i < this.value.length; i++) {\r\n                if (this.value[i] == option.value) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [SelectButton],\r\n    declarations: [SelectButton]\r\n})\r\nexport class SelectButtonModule { }\r\n"]}