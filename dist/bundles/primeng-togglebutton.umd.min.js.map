{"version":3,"sources":["ng://primeng/togglebutton/togglebutton.ts"],"names":["TOGGLEBUTTON_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ToggleButton","multi","this","onLabel","offLabel","iconPos","onChange","EventEmitter","checked","focus","onModelChange","onModelTouched","prototype","ngAfterViewInit","checkboxViewChild","checkbox","nativeElement","toggle","event","disabled","emit","originalEvent","onFocus","onBlur","writeValue","value","registerOnChange","fn","registerOnTouched","setDisabledState","val","Object","defineProperty","length","__decorate","Input","Output","ViewChild","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","ToggleButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"4wBAIaA,EAAmC,CAC9CC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAuBTD,EAAA,WAAA,SAAAA,IAEaE,KAAAC,QAAkB,MAElBD,KAAAE,SAAmB,KAkBnBF,KAAAG,QAAkB,OAEjBH,KAAAI,SAA8B,IAAIC,EAAAA,aAM5CL,KAAAM,SAAmB,EAEnBN,KAAAO,OAAiB,EAEjBP,KAAAQ,cAA0B,aAE1BR,KAAAS,eAA2B,aAuD/B,OArDIX,EAAAY,UAAAC,gBAAA,WACQX,KAAKY,oBACLZ,KAAKa,SAA8Bb,KAAKY,kBAAkBE,gBAIlEhB,EAAAY,UAAAK,OAAA,SAAOC,GACEhB,KAAKiB,WACNjB,KAAKM,SAAWN,KAAKM,QACrBN,KAAKQ,cAAcR,KAAKM,SACxBN,KAAKS,iBACLT,KAAKI,SAASc,KAAK,CACfC,cAAeH,EACfV,QAASN,KAAKM,UAEdN,KAAKa,UACLb,KAAKa,SAASN,UAK1BT,EAAAY,UAAAU,QAAA,WACIpB,KAAKO,OAAQ,GAGjBT,EAAAY,UAAAW,OAAA,WACIrB,KAAKO,OAAQ,EACbP,KAAKS,kBAGTX,EAAAY,UAAAY,WAAA,SAAWC,GACPvB,KAAKM,QAAUiB,GAGnBzB,EAAAY,UAAAc,iBAAA,SAAiBC,GACbzB,KAAKQ,cAAgBiB,GAGzB3B,EAAAY,UAAAgB,kBAAA,SAAkBD,GACdzB,KAAKS,eAAiBgB,GAG1B3B,EAAAY,UAAAiB,iBAAA,SAAiBC,GACb5B,KAAKiB,SAAWW,GAGpBC,OAAAC,eAAIhC,EAAAY,UAAA,aAAU,KAAd,WACI,OAAOV,KAAKC,SAAWD,KAAKC,QAAQ8B,OAAS,mCAGjDF,OAAAC,eAAIhC,EAAAY,UAAA,cAAW,KAAf,WACI,OAAOV,KAAKC,SAAWD,KAAKC,QAAQ8B,OAAS,mCAvFxCC,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,8CAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,uCAESD,EAAA,CAATE,EAAAA,yCAEsBF,EAAA,CAAtBG,EAAAA,UAAU,qDA1BFrC,EAAYkC,EAAA,CApBxBI,EAAAA,UAAU,CACPC,SAAU,iBACVC,SAAU,w7CAeVC,UAAW,CAAC9C,GACZ+C,gBAAiBC,EAAAA,wBAAwBC,WAEhC5C,GAAb,gBAkGA,SAAA6C,KAAkC,OAArBA,EAAkBX,EAAA,CAL9BY,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACjD,GACVkD,aAAc,CAAClD,MAEN6C","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,AfterViewInit,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleButton),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-toggleButton',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon && !offIcon), \r\n                'ui-button-text-icon-left': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'left'), \r\n                'ui-button-text-icon-right': (onIcon && offIcon && hasOnLabel && hasOffLabel && iconPos === 'right'),'ui-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),\r\n                'ui-state-active': checked,'ui-state-focus':focus,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \r\n                (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #checkbox type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.tabindex]=\"tabindex\"\r\n                    role=\"button\" [attr.aria-pressed]=\"checked\" [attr.aria-labelledby]=\"ariaLabelledBy\">\r\n            </div>\r\n            <span *ngIf=\"onIcon||offIcon\" class=\"ui-button-icon-left\" [class]=\"checked ? this.onIcon : this.offIcon\" [ngClass]=\"{'ui-button-icon-left': (iconPos === 'left'), \r\n            'ui-button-icon-right': (iconPos === 'right')}\"></span>\r\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? hasOnLabel ? onLabel : 'ui-btn' : hasOffLabel ? offLabel : 'ui-btn'}}</span>\r\n        </div>\r\n    `,\r\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class ToggleButton implements ControlValueAccessor,AfterViewInit {\r\n\r\n    @Input() onLabel: string = 'Yes';\r\n\r\n    @Input() offLabel: string = 'No';\r\n\r\n    @Input() onIcon: string;\r\n\r\n    @Input() offIcon: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ViewChild('checkbox') checkboxViewChild: ElementRef;\r\n    \r\n    checkbox: HTMLInputElement;\r\n    \r\n    checked: boolean = false;\r\n\r\n    focus: boolean = false;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    ngAfterViewInit() {\r\n        if (this.checkboxViewChild){\r\n            this.checkbox = <HTMLInputElement> this.checkboxViewChild.nativeElement;\r\n        }\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if (!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.onModelChange(this.checked);\r\n            this.onModelTouched();\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                checked: this.checked\r\n            });\r\n            if (this.checkbox) {\r\n                this.checkbox.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    onFocus() {\r\n        this.focus = true;\r\n    }\r\n    \r\n    onBlur() {\r\n        this.focus = false;\r\n        this.onModelTouched();\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.checked = value;\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    get hasOnLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n    \r\n    get hasOffLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ToggleButton],\r\n    declarations: [ToggleButton]\r\n})\r\nexport class ToggleButtonModule { }\r\n"]}