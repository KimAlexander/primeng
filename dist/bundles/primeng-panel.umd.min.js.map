{"version":3,"sources":["ng://primeng/panel/panel.ts"],"names":["idx","Panel","el","this","collapsed","expandIcon","collapseIcon","showHeader","toggler","collapsedChange","EventEmitter","onBeforeToggle","onAfterToggle","transitionOptions","id","prototype","onHeaderClick","event","toggle","onIconClick","animating","emit","originalEvent","toggleable","expand","collapse","preventDefault","getBlockableElement","nativeElement","children","onToggleDone","ElementRef","__decorate","Input","Output","ContentChild","Footer","Component","selector","template","animations","trigger","state","style","height","opacity","params","transition","animate","changeDetection","ChangeDetectionStrategy","Default","PanelModule","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"k0BAMIA,EAAc,EAiDlBC,EAAA,WAkCI,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EA5BXC,KAAAC,WAAqB,EAMrBD,KAAAE,WAAqB,aAErBF,KAAAG,aAAuB,cAEvBH,KAAAI,YAAsB,EAEtBJ,KAAAK,QAAkB,OAEjBL,KAAAM,gBAAqC,IAAIC,EAAAA,aAEzCP,KAAAQ,eAAoC,IAAID,EAAAA,aAExCP,KAAAS,cAAmC,IAAIF,EAAAA,aAExCP,KAAAU,kBAA4B,uCAMrCV,KAAAW,GAAa,YAAYd,IAqD7B,OAjDIC,EAAAc,UAAAC,cAAA,SAAcC,GACW,WAAjBd,KAAKK,SACLL,KAAKe,OAAOD,IAIpBhB,EAAAc,UAAAI,YAAA,SAAYF,GACa,SAAjBd,KAAKK,SACLL,KAAKe,OAAOD,IAIpBhB,EAAAc,UAAAG,OAAA,SAAOD,GACH,GAAId,KAAKiB,UACL,OAAO,EAGXjB,KAAKiB,WAAY,EACjBjB,KAAKQ,eAAeU,KAAK,CAACC,cAAeL,EAAOb,UAAWD,KAAKC,YAE5DD,KAAKoB,aACDpB,KAAKC,UACLD,KAAKqB,OAAOP,GAEZd,KAAKsB,SAASR,IAGtBA,EAAMS,kBAGVzB,EAAAc,UAAAS,OAAA,SAAOP,GACHd,KAAKC,WAAY,EACjBD,KAAKM,gBAAgBY,KAAKlB,KAAKC,YAGnCH,EAAAc,UAAAU,SAAA,SAASR,GACLd,KAAKC,WAAY,EACjBD,KAAKM,gBAAgBY,KAAKlB,KAAKC,YAGnCH,EAAAc,UAAAY,oBAAA,WACI,OAAOxB,KAAKD,GAAG0B,cAAcC,SAAS,IAG1C5B,EAAAc,UAAAe,aAAA,SAAab,GACTd,KAAKiB,WAAY,EACjBjB,KAAKS,cAAcS,KAAK,CAACC,cAAeL,EAAOb,UAAWD,KAAKC,sDAhD3C2B,EAAAA,cAhCfC,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,uCAESD,EAAA,CAATE,EAAAA,gDAESF,EAAA,CAATE,EAAAA,+CAESF,EAAA,CAATE,EAAAA,8CAEQF,EAAA,CAARC,EAAAA,iDAEqBD,EAAA,CAArBG,EAAAA,aAAaC,EAAAA,2CA5BLnC,EAAK+B,EAAA,CA/CjBK,EAAAA,UAAU,CACPC,SAAU,UACVC,SAAU,6+DAwBVC,WAAY,CACRC,EAAAA,QAAQ,eAAgB,CACpBC,EAAAA,MAAM,SAAUC,EAAAA,MAAM,CAClBC,OAAQ,IACRC,QAAS,KAEbH,EAAAA,MAAM,OAAQC,EAAAA,MAAM,CAChBC,OAAQ,aACRC,QAAS,gBACT,CAACC,OAAQ,CAACF,OAAQ,IAAKC,QAAS,OACpCH,EAAAA,MAAM,UAAWC,EAAAA,MAAM,CACnBC,OAAQ,IACRC,QAAS,KAEbE,EAAAA,WAAW,qBAAsBC,EAAAA,QAAQ,yBACzCD,EAAAA,WAAW,iBAAkBC,EAAAA,QAAQ,yBACrCD,EAAAA,WAAW,kBAAmBC,EAAAA,QAAQ,4BAG9CC,gBAAiBC,EAAAA,wBAAwBC,WAEhClD,GAAb,gBA4FA,SAAAmD,KAA2B,OAAdA,EAAWpB,EAAA,CALvBqB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACvD,EAAMwD,EAAAA,cAChBC,aAAc,CAACzD,MAENmD","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ContentChild,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule,Footer} from 'primeng/api';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {trigger,state,style,transition,animate} from '@angular/animations';\r\n\r\nlet idx: number = 0;\r\n\r\n@Component({\r\n    selector: 'p-panel',\r\n    template: `\r\n        <div [attr.id]=\"id\" [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div [ngClass]=\"{'ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all': true, 'ui-panel-titlebar-clickable': (toggleable && toggler === 'header')}\" \r\n                *ngIf=\"showHeader\" (click)=\"onHeaderClick($event)\" [attr.id]=\"id + '-titlebar'\">\r\n                <span class=\"ui-panel-title\" *ngIf=\"header\" [attr.id]=\"id + '_header'\">{{header}}</span>\r\n                <ng-content select=\"p-header\"></ng-content>\r\n                <a *ngIf=\"toggleable\" [attr.id]=\"id + '-label'\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" tabindex=\"0\"\r\n                    (click)=\"onIconClick($event)\" (keydown.enter)=\"onIconClick($event)\" [attr.aria-controls]=\"id + '-content'\" role=\"tab\" [attr.aria-expanded]=\"!collapsed\">\r\n                    <span [class]=\"collapsed ? expandIcon : collapseIcon\"></span>\r\n                </a>\r\n            </div>\r\n            <div [attr.id]=\"id + '-content'\" class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: animating ? transitionOptions : '0ms', height: '0', opacity:'0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*', opacity: '1'}}\" (@panelContent.done)=\"onToggleDone($event)\"\r\n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\"\r\n                role=\"region\" [attr.aria-hidden]=\"collapsed\" [attr.aria-labelledby]=\"id  + '-titlebar'\">\r\n                <div class=\"ui-panel-content ui-widget-content\">\r\n                    <ng-content></ng-content>\r\n                </div>\r\n                \r\n                <div class=\"ui-panel-footer ui-widget-content\" *ngIf=\"footerFacet\">\r\n                    <ng-content select=\"p-footer\"></ng-content>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelContent', [\r\n            state('hidden', style({\r\n                height: '0',\r\n                opacity: 0\r\n            })),\r\n            state('void', style({\r\n                height: '{{height}}',\r\n                opacity: '{{opacity}}'\r\n            }), {params: {height: '0', opacity: '0'}}),\r\n            state('visible', style({\r\n                height: '*',\r\n                opacity: 1\r\n            })),\r\n            transition('visible <=> hidden', animate('{{transitionParams}}')),\r\n            transition('void => hidden', animate('{{transitionParams}}')),\r\n            transition('void => visible', animate('{{transitionParams}}'))\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Panel implements BlockableUI {\r\n\r\n    @Input() toggleable: boolean;\r\n\r\n    @Input() header: string;\r\n\r\n    @Input() collapsed: boolean = false;\r\n    \r\n    @Input() style: any;\r\n    \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() expandIcon: string = 'pi pi-plus';\r\n    \r\n    @Input() collapseIcon: string = 'pi pi-minus';\r\n  \r\n    @Input() showHeader: boolean = true;\r\n\r\n    @Input() toggler: string = \"icon\";\r\n    \r\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\r\n\r\n    @ContentChild(Footer) footerFacet;\r\n    \r\n    animating: boolean;\r\n    \r\n    id: string = `ui-panel-${idx++}`;\r\n    \r\n    constructor(private el: ElementRef) {}\r\n\r\n    onHeaderClick(event: Event) {\r\n        if (this.toggler === 'header') {\r\n            this.toggle(event);\r\n        }\r\n    }\r\n\r\n    onIconClick(event: Event) {\r\n        if (this.toggler === 'icon') {\r\n            this.toggle(event);\r\n        }\r\n    }\r\n    \r\n    toggle(event: Event) {\r\n        if (this.animating) {\r\n            return false;\r\n        }\r\n        \r\n        this.animating = true;\r\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\r\n        \r\n        if (this.toggleable) {\r\n            if (this.collapsed)\r\n                this.expand(event);\r\n            else\r\n                this.collapse(event);\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n    \r\n    expand(event) {\r\n        this.collapsed = false;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    collapse(event) {\r\n        this.collapsed = true;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    getBlockableElement(): HTMLElementÂ {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n    \r\n    onToggleDone(event: Event) {\r\n        this.animating = false;\r\n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Panel,SharedModule],\r\n    declarations: [Panel]\r\n})\r\nexport class PanelModule { }\r\n"]}