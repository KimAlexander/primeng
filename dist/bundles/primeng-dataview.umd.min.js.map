{"version":3,"sources":["ng://primeng/dataview/dataview.ts"],"names":["DataView","el","this","layout","pageLinks","paginatorPosition","alwaysShowPaginator","paginatorDropdownScrollHeight","currentPageReportTemplate","emptyMessage","onLazyLoad","EventEmitter","trackBy","index","item","loadingIcon","first","onPage","onSort","onChangeLayout","prototype","ngOnInit","lazy","emit","createLazyLoadMetadata","initialized","ngOnChanges","simpleChanges","value","_value","currentValue","updateTotalRecords","hasFilter","filter","filterValue","sortField","sortOrder","sort","ngAfterContentInit","_this","templates","forEach","getType","listItemTemplate","template","gridItemTemplate","paginatorLeftTemplate","paginatorRightTemplate","updateItemTemplate","itemTemplate","changeLayout","totalRecords","length","paginate","event","rows","data1","data2","value1","ObjectUtils","resolveFieldData","value2","result","localeCompare","isEmpty","data","filteredValue","getBlockableElement","nativeElement","children","filterMatchMode","searchFields","filterBy","split","FilterUtils","filterLocale","paginator","trim","ElementRef","__decorate","Input","Output","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","Component","selector","changeDetection","ChangeDetectionStrategy","Default","DataViewLayoutOptions","dv","preventDefault","DataViewModule","NgModule","imports","CommonModule","SharedModule","PaginatorModule","exports","declarations"],"mappings":"m4BAAAA,EAAA,WA8HI,SAAAA,EAAmBC,GAAAC,KAAAD,GAAAA,EAlFVC,KAAAC,OAAiB,OAQjBD,KAAAE,UAAoB,EAIpBF,KAAAG,kBAA4B,SAE5BH,KAAAI,qBAA+B,EAI/BJ,KAAAK,8BAAwC,QAExCL,KAAAM,0BAAoC,gCAMpCN,KAAAO,aAAuB,mBAEtBP,KAAAQ,WAAgC,IAAIC,EAAAA,aAMrCT,KAAAU,QAAoB,SAACC,EAAeC,GAAc,OAAAA,GAQlDZ,KAAAa,YAAsB,gBAEtBb,KAAAc,MAAgB,EAQfd,KAAAe,OAA4B,IAAIN,EAAAA,aAEhCT,KAAAgB,OAA4B,IAAIP,EAAAA,aAEhCT,KAAAiB,eAAoC,IAAIR,EAAAA,aA+LtD,OAnKIX,EAAAoB,UAAAC,SAAA,WACQnB,KAAKoB,MACLpB,KAAKQ,WAAWa,KAAKrB,KAAKsB,0BAE9BtB,KAAKuB,aAAc,GAGvBzB,EAAAoB,UAAAM,YAAA,SAAYC,GACJA,EAAcC,QACd1B,KAAK2B,OAASF,EAAcC,MAAME,aAClC5B,KAAK6B,sBAEA7B,KAAKoB,MAAQpB,KAAK8B,aACnB9B,KAAK+B,OAAO/B,KAAKgC,eAIrBP,EAAcQ,WAAaR,EAAcS,aAEpClC,KAAKoB,OAAQpB,KAAKuB,aACnBvB,KAAKmC,SAKjBrC,EAAAoB,UAAAkB,mBAAA,WAAA,IAAAC,EAAArC,KACIA,KAAKsC,UAAUC,SAAQ,SAAC3B,GACpB,OAAOA,EAAK4B,WACR,IAAK,WACDH,EAAKI,iBAAmB7B,EAAK8B,SACjC,MAEA,IAAK,WACDL,EAAKM,iBAAmB/B,EAAK8B,SACjC,MAEA,IAAK,gBACDL,EAAKO,sBAAwBhC,EAAK8B,SACtC,MAEA,IAAK,iBACDL,EAAKQ,uBAAyBjC,EAAK8B,aAK/C1C,KAAK8C,sBAGThD,EAAAoB,UAAA4B,mBAAA,WACI,OAAO9C,KAAKC,QACR,IAAK,OACDD,KAAK+C,aAAe/C,KAAKyC,iBAC7B,MAEA,IAAK,OACDzC,KAAK+C,aAAe/C,KAAK2C,mBAKrC7C,EAAAoB,UAAA8B,aAAA,SAAa/C,GACTD,KAAKC,OAASA,EACdD,KAAKiB,eAAeI,KAAK,CACrBpB,OAAQD,KAAKC,SAEjBD,KAAK8C,sBAGThD,EAAAoB,UAAAW,mBAAA,WACI7B,KAAKiD,aAAejD,KAAKoB,KAAOpB,KAAKiD,aAAgBjD,KAAK2B,OAAS3B,KAAK2B,OAAOuB,OAAS,GAG5FpD,EAAAoB,UAAAiC,SAAA,SAASC,GACLpD,KAAKc,MAAQsC,EAAMtC,MACnBd,KAAKqD,KAAOD,EAAMC,KAEdrD,KAAKoB,MACLpB,KAAKQ,WAAWa,KAAKrB,KAAKsB,0BAG9BtB,KAAKe,OAAOM,KAAK,CACbP,MAAOd,KAAKc,MACZuC,KAAMrD,KAAKqD,QAInBvD,EAAAoB,UAAAiB,KAAA,WAAA,IAAAE,EAAArC,KACIA,KAAKc,MAAQ,EAETd,KAAKoB,KACLpB,KAAKQ,WAAWa,KAAKrB,KAAKsB,0BAErBtB,KAAK0B,QACV1B,KAAK0B,MAAMS,MAAK,SAACmB,EAAOC,GACpB,IAAIC,EAASC,EAAAA,YAAYC,iBAAiBJ,EAAOjB,EAAKJ,WAClD0B,EAASF,EAAAA,YAAYC,iBAAiBH,EAAOlB,EAAKJ,WAClD2B,EAAS,KAab,OAVIA,EADU,MAAVJ,GAA4B,MAAVG,GACR,EACK,MAAVH,GAA4B,MAAVG,EACd,EACM,MAAVH,GAA4B,MAAVG,EACd,EACc,iBAAXH,GAAyC,iBAAXG,EACjCH,EAAOK,cAAcF,GAEpBH,EAASG,GAAW,EAAKH,EAASG,EAAU,EAAI,EAEtDtB,EAAKH,UAAY0B,KAGzB5D,KAAK8B,aACL9B,KAAK+B,OAAO/B,KAAKgC,cAIzBhC,KAAKgB,OAAOK,KAAK,CACbY,UAAWjC,KAAKiC,UAChBC,UAAWlC,KAAKkC,aAIxBpC,EAAAoB,UAAA4C,QAAA,WACI,IAAIC,EAAO/D,KAAKgE,eAAehE,KAAK0B,MACpC,OAAe,MAARqC,GAA+B,GAAfA,EAAKb,QAGhCpD,EAAAoB,UAAAI,uBAAA,WACI,MAAO,CACHR,MAAOd,KAAKc,MACZuC,KAAMrD,KAAKqD,KACXpB,UAAWjC,KAAKiC,UAChBC,UAAWlC,KAAKkC,YAIxBpC,EAAAoB,UAAA+C,oBAAA,WACI,OAAOjE,KAAKD,GAAGmE,cAAcC,SAAS,IAG1CrE,EAAAoB,UAAAa,OAAA,SAAOA,EAAgBqC,GAGnB,QAHmB,IAAAA,IAAAA,EAAA,YACnBpE,KAAKgC,YAAcD,EAEf/B,KAAK0B,OAAS1B,KAAK0B,MAAMwB,OAAQ,CACjC,IAAImB,EAAerE,KAAKsE,SAASC,MAAM,KACvCvE,KAAKgE,cAAgBQ,EAAAA,YAAYzC,OAAO/B,KAAK0B,MAAO2C,EAActC,EAAQqC,EAAiBpE,KAAKyE,cAE5FzE,KAAKgE,cAAcd,SAAWlD,KAAK0B,MAAMwB,SACzClD,KAAKgE,cAAgB,MAGrBhE,KAAK0E,YACL1E,KAAKc,MAAQ,EACbd,KAAKiD,aAAejD,KAAKgE,cAAgBhE,KAAKgE,cAAcd,OAASlD,KAAK0B,MAAQ1B,KAAK0B,MAAMwB,OAAS,KAKlHpD,EAAAoB,UAAAY,UAAA,WACI,OAAO9B,KAAKgC,aAAehC,KAAKgC,YAAY2C,OAAOzB,OAAS,4CAnKzC0B,EAAAA,cAlFdC,EAAA,CAARC,EAAAA,sCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,kDAEQD,EAAA,CAARC,EAAAA,iDAEQD,EAAA,CAARC,EAAAA,mDAEQD,EAAA,CAARC,EAAAA,yDAEQD,EAAA,CAARC,EAAAA,6DAEQD,EAAA,CAARC,EAAAA,yDAEQD,EAAA,CAARC,EAAAA,qDAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,4CAESD,EAAA,CAATE,EAAAA,2CAEQF,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,2CAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,yCAEQD,EAAA,CAARC,EAAAA,qCAESD,EAAA,CAATE,EAAAA,uCAESF,EAAA,CAATE,EAAAA,uCAESF,EAAA,CAATE,EAAAA,+CAEqBF,EAAA,CAArBG,EAAAA,aAAaC,EAAAA,sCAEQJ,EAAA,CAArBG,EAAAA,aAAaE,EAAAA,sCAEkBL,EAAA,CAA/BM,EAAAA,gBAAgBC,EAAAA,gDAhERtF,EAAQ+E,EAAA,CAlCpBQ,EAAAA,UAAU,CACPC,SAAU,aACV5C,SAAU,0yFA8BV6C,gBAAiBC,EAAAA,wBAAwBC,WAEhC3F,GA1Cb,gBA2TI,SAAA4F,EAAmBC,GAAA3F,KAAA2F,GAAAA,EAMvB,OAJID,EAAAxE,UAAA8B,aAAA,SAAaI,EAAcnD,GACvBD,KAAK2F,GAAG3C,aAAa/C,GACrBmD,EAAMwC,2DAJa9F,KAJd+E,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAJQY,EAAqBb,EAAA,CAhBjCQ,EAAAA,UAAU,CACPC,SAAU,0BACV5C,SAAU,07BAcDgD,mBAkBb,SAAAG,KAA8B,OAAjBA,EAAchB,EAAA,CAL1BiB,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,iBACpCC,QAAS,CAACrG,EAASmG,EAAAA,aAAaP,GAChCU,aAAc,CAACtG,EAAS4F,MAEfG","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,AfterContentInit,Input,Output,EventEmitter,ContentChild,ContentChildren,QueryList,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObjectUtils} from 'primeng/utils';\r\nimport {Header,Footer,PrimeTemplate,SharedModule} from 'primeng/api';\r\nimport {PaginatorModule} from 'primeng/paginator';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {FilterUtils} from 'primeng/utils';\r\n\r\n@Component({\r\n    selector: 'p-dataView',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-dataview ui-widget': true, 'ui-dataview-list': (layout === 'list'), 'ui-dataview-grid': (layout === 'grid')}\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div class=\"ui-dataview-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\r\n            <div class=\"ui-dataview-loading-content\" *ngIf=\"loading\">\r\n                <i [class]=\"'ui-dataview-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <div class=\"ui-dataview-header ui-widget-header ui-corner-top\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-top\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\r\n            <div class=\"ui-dataview-content ui-widget-content\">\r\n                <div class=\"ui-g\">\r\n                    <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"paginator ? ((filteredValue||value) | slice:(lazy ? 0 : first):((lazy ? 0 : first) + rows)) : (filteredValue||value)\" [ngForTrackBy]=\"trackBy\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: rowData, rowIndex: rowIndex}\"></ng-container>\r\n                    </ng-template>\r\n                    <div *ngIf=\"isEmpty()\" class=\"ui-g-12 ui-dataview-emptymessage\">{{emptyMessage}}</div>\r\n                </div>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\r\n            <div class=\"ui-dataview-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\r\n                <ng-content select=\"p-footer\"></ng-content>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class DataView implements OnInit,AfterContentInit,BlockableUI,OnChanges {\r\n\r\n    @Input() layout: string = 'list';\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() totalRecords: number;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() paginatorDropdownScrollHeight: string = '200px';\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() lazy: boolean;\r\n\r\n    @Input() emptyMessage: string = 'No records found';\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filterBy: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() sortField: string;\r\n\r\n    @Input() sortOrder: number;\r\n\r\n    @Input() value: any[];\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onChangeLayout: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChild(Header) header;\r\n\r\n    @ContentChild(Footer) footer;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    _value: any[];\r\n\r\n    listItemTemplate: TemplateRef<any>;\r\n\r\n    gridItemTemplate: TemplateRef<any>;\r\n\r\n    itemTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    filteredValue: any[];\r\n\r\n    filterValue: string;\r\n\r\n    initialized: boolean;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngOnChanges(simpleChanges: SimpleChanges) {\r\n        if (simpleChanges.value) {\r\n            this._value = simpleChanges.value.currentValue;\r\n            this.updateTotalRecords();\r\n\r\n            if (!this.lazy && this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        if (simpleChanges.sortField || simpleChanges.sortOrder) {\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if (!this.lazy || this.initialized) {\r\n                this.sort();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'listItem':\r\n                    this.listItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'gridItem':\r\n                    this.gridItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n\r\n        this.updateItemTemplate();\r\n    }\r\n\r\n    updateItemTemplate() {\r\n        switch(this.layout) {\r\n            case 'list':\r\n                this.itemTemplate = this.listItemTemplate;\r\n            break;\r\n\r\n            case 'grid':\r\n                this.itemTemplate = this.gridItemTemplate;\r\n            break;\r\n        }\r\n    }\r\n\r\n    changeLayout(layout: string) {\r\n        this.layout = layout;\r\n        this.onChangeLayout.emit({\r\n            layout: this.layout\r\n        });\r\n        this.updateItemTemplate();\r\n    }\r\n\r\n    updateTotalRecords() {\r\n        this.totalRecords = this.lazy ? this.totalRecords : (this._value ? this._value.length : 0);\r\n    }\r\n\r\n    paginate(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n    }\r\n\r\n    sort() {\r\n        this.first = 0;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else if (this.value) {\r\n            this.value.sort((data1, data2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2);\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n\r\n            if (this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        this.onSort.emit({\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredValue||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        };\r\n    }\r\n\r\n    getBlockableElement(): HTMLElementÂ {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    filter(filter: string, filterMatchMode:string =\"contains\") {\r\n        this.filterValue = filter;\r\n\r\n        if (this.value && this.value.length) {\r\n            let searchFields = this.filterBy.split(',');\r\n            this.filteredValue = FilterUtils.filter(this.value, searchFields, filter, filterMatchMode, this.filterLocale);\r\n\r\n            if (this.filteredValue.length === this.value.length ) {\r\n                this.filteredValue = null;\r\n            }\r\n\r\n            if (this.paginator) {\r\n                this.first = 0;\r\n                this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    hasFilter() {\r\n        return this.filterValue && this.filterValue.trim().length > 0;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-dataViewLayoutOptions',\r\n    template: `\r\n        <div [ngClass]=\"'ui-dataview-layout-options ui-selectbutton ui-buttonset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <a tabindex=\"0\" class=\"ui-button ui-button-icon-only ui-state-default\" (click)=\"changeLayout($event, 'list')\" (keydown.enter)=\"changeLayout($event, 'list')\"\r\n                [ngClass]=\"{'ui-state-active': dv.layout === 'list'}\">\r\n                <i class=\"pi pi-bars ui-button-icon-left\"></i>\r\n                <span class=\"ui-button-text ui-clickable\">ui-btn</span>\r\n            </a><a tabindex=\"0\" class=\"ui-button ui-button-icon-only ui-state-default\" (click)=\"changeLayout($event, 'grid')\" (keydown.enter)=\"changeLayout($event, 'grid')\"\r\n                [ngClass]=\"{'ui-state-active': dv.layout === 'grid'}\">\r\n                <i class=\"pi pi-th-large ui-button-icon-left\"></i>\r\n                <span class=\"ui-button-text ui-clickable\">ui-btn</span>\r\n            </a>\r\n        </div>\r\n    `\r\n})\r\nexport class DataViewLayoutOptions  {\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    constructor(public dv: DataView) {}\r\n\r\n    changeLayout(event: Event, layout: string) {\r\n        this.dv.changeLayout(layout);\r\n        event.preventDefault();\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule,SharedModule,PaginatorModule],\r\n    exports: [DataView,SharedModule,DataViewLayoutOptions],\r\n    declarations: [DataView,DataViewLayoutOptions]\r\n})\r\nexport class DataViewModule { }\r\n"]}