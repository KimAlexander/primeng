{"version":3,"sources":["ng://primeng/inputmask/inputmask.ts"],"names":["INPUTMASK_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputMask","multi","el","this","type","slotChar","autoClear","characterPattern","onComplete","EventEmitter","onFocus","onBlur","onInput","onModelChange","onModelTouched","prototype","ngOnInit","ua","DomHandler","getUserAgent","androidChrome","test","initMask","Object","defineProperty","_mask","val","writeValue","value","tests","partialPosition","mask","length","len","firstNonMaskPos","defs","9","a","*","maskTokens","split","i","c","push","RegExp","lastRequiredNonMaskPos","buffer","getPlaceholder","defaultBuffer","join","inputViewChild","nativeElement","undefined","checkVal","focusText","updateFilledState","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","caret","first","last","range","begin","end","offsetParent","document","activeElement","setSelectionRange","selectionStart","selectionEnd","createRange","duplicate","moveStart","text","collapse","moveEnd","select","isCompleted","charAt","seekNext","pos","seekPrev","shiftL","j","writeBuffer","Math","max","shiftR","t","handleAndroidInput","e","_this","curVal","oldVal","setTimeout","updateModel","emit","onInputBlur","focused","event_1","createEvent","initEvent","dispatchEvent","onKeyDown","readonly","k","which","keyCode","iPhone","clearBuffer","preventDefault","onKeyPress","p","next","completed","ctrlKey","altKey","metaKey","String","fromCharCode","start","allow","lastMatch","substring","onInputFocus","event","clearTimeout","caretTimeoutId","replace","onInputChange","handleInputChange","getUnmaskedValue","unmaskedBuffer","updatedValue","unmask","target","filled","focus","ngOnDestroy","ElementRef","__decorate","Input","ViewChild","Output","Component","selector","template","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","Default","InputMaskModule","NgModule","imports","CommonModule","InputTextModule","exports","declarations"],"mappings":"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","sourcesContent":["/*\r\n    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery\r\n    https://github.com/digitalBush/jquery.maskedinput/\r\n\r\n    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)\r\n\r\n    Permission is hereby granted, free of charge, to any person\r\n    obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without\r\n    restriction, including without limitation the rights to use,\r\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the\r\n    Software is furnished to do so, subject to the following\r\n    conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n    OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\nimport {NgModule,Component,ElementRef,OnInit,OnDestroy,Input,forwardRef,Output,EventEmitter,ViewChild,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {InputTextModule} from 'primeng/inputtext';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const INPUTMASK_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => InputMask),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-inputMask',\r\n    template: `<input #input pInputText [attr.id]=\"inputId\" [attr.type]=\"type\" [attr.name]=\"name\" [ngStyle]=\"style\" [ngClass]=\"styleClass\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\"\r\n        [attr.size]=\"size\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\" [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\r\n        (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (keydown)=\"onKeyDown($event)\" (keypress)=\"onKeyPress($event)\" [attr.autofocus]=\"autoFocus\"\r\n        (input)=\"onInputChange($event)\" (paste)=\"handleInputChange($event)\">`,\r\n    host: {\r\n        '[class.ui-inputwrapper-filled]': 'filled',\r\n        '[class.ui-inputwrapper-focus]': 'focused'\r\n    },\r\n    providers: [INPUTMASK_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class InputMask implements OnInit,OnDestroy,ControlValueAccessor {\r\n\r\n    @Input() type: string = 'text';\r\n\r\n    @Input() slotChar: string = '_';\r\n\r\n    @Input() autoClear: boolean = true;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() placeholder: string;\r\n\r\n    @Input() size: number;\r\n\r\n    @Input() maxlength: number;\r\n\r\n    @Input() tabindex: string;\r\n\r\n    @Input() title: string;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @Input() ariaRequired: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() readonly: boolean;\r\n\r\n    @Input() unmask: boolean;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() required: boolean;\r\n\r\n    @Input() characterPattern: string = '[A-Za-z]';\r\n\r\n    @Input() autoFocus: boolean;\r\n\r\n    @Input() autocomplete: string;\r\n\r\n    @ViewChild('input') inputViewChild: ElementRef;\r\n\r\n    @Output() onComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n    value: any;\r\n\r\n    _mask: string;\r\n\r\n    onModelChange: Function = () => {};\r\n\r\n    onModelTouched: Function = () => {};\r\n\r\n    input: HTMLInputElement;\r\n\r\n    filled: boolean;\r\n\r\n    defs: any;\r\n\r\n    tests: any[];\r\n\r\n    partialPosition: any;\r\n\r\n    firstNonMaskPos: number;\r\n\r\n    lastRequiredNonMaskPos: any;\r\n\r\n    len: number;\r\n\r\n    oldVal: string;\r\n\r\n    buffer: any;\r\n\r\n    defaultBuffer: string;\r\n\r\n    focusText: string;\r\n\r\n    caretTimeoutId: any;\r\n\r\n    androidChrome: boolean;\r\n\r\n    focused: boolean;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        let ua = DomHandler.getUserAgent();\r\n        this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\r\n\r\n        this.initMask();\r\n    }\r\n\r\n    @Input() get mask(): string {\r\n        return this._mask;\r\n    }\r\n\r\n    set mask(val:string) {\r\n        this._mask = val;\r\n\r\n        this.initMask();\r\n        this.writeValue('');\r\n        this.onModelChange(this.value);\r\n    }\r\n\r\n    initMask() {\r\n        this.tests = [];\r\n        this.partialPosition = this.mask.length;\r\n        this.len = this.mask.length;\r\n        this.firstNonMaskPos = null;\r\n        this.defs = {\r\n            '9': '[0-9]',\r\n            'a': this.characterPattern,\r\n            '*': `${this.characterPattern}|[0-9]`\r\n        };\r\n\r\n        let maskTokens = this.mask.split('');\r\n        for(let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c == '?') {\r\n\t\t\t\tthis.len--;\r\n\t\t\t\tthis.partialPosition = i;\r\n\t\t\t}\r\n            else if (this.defs[c]) {\r\n\t\t\t\tthis.tests.push(new RegExp(this.defs[c]));\r\n\t\t\t\tif (this.firstNonMaskPos === null) {\r\n\t                this.firstNonMaskPos = this.tests.length - 1;\r\n\t\t\t\t}\r\n                if (i < this.partialPosition){\r\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\r\n                }\r\n\t\t\t}\r\n            else {\r\n\t\t\t\tthis.tests.push(null);\r\n\t\t\t}\r\n        }\r\n\r\n        this.buffer = [];\r\n        for(let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c != '?') {\r\n                if (this.defs[c])\r\n                    this.buffer.push(this.getPlaceholder(i));\r\n                else\r\n                    this.buffer.push(c);\r\n            }\r\n        }\r\n        this.defaultBuffer = this.buffer.join('');\r\n    }\r\n\r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n\r\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\r\n            if (this.value == undefined || this.value == null)\r\n                this.inputViewChild.nativeElement.value = '';\r\n            else\r\n                this.inputViewChild.nativeElement.value = this.value;\r\n\r\n            this.checkVal();\r\n            this.focusText = this.inputViewChild.nativeElement.value;\r\n            this.updateFilledState();\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n\r\n    caret(first?: number, last?: number) {\r\n        let range, begin, end;\r\n\r\n        if (!this.inputViewChild.nativeElement.offsetParent||this.inputViewChild.nativeElement !== document.activeElement) {\r\n            return;\r\n        }\r\n\r\n        if (typeof first == 'number') {\r\n            begin = first;\r\n            end = (typeof last === 'number') ? last : begin;\r\n            if (this.inputViewChild.nativeElement.setSelectionRange) {\r\n                this.inputViewChild.nativeElement.setSelectionRange(begin, end);\r\n            }\r\n            else if (this.inputViewChild.nativeElement['createTextRange']) {\r\n                range = this.inputViewChild.nativeElement['createTextRange']();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', begin);\r\n                range.select();\r\n            }\r\n        }\r\n        else {\r\n            if (this.inputViewChild.nativeElement.setSelectionRange) {\r\n    \t\t\tbegin = this.inputViewChild.nativeElement.selectionStart;\r\n    \t\t\tend = this.inputViewChild.nativeElement.selectionEnd;\r\n    \t\t}\r\n            else if (document['selection'] && document['selection'].createRange) {\r\n    \t\t\trange = document['selection'].createRange();\r\n    \t\t\tbegin = 0 - range.duplicate().moveStart('character', -100000);\r\n    \t\t\tend = begin + range.text.length;\r\n    \t\t}\r\n\r\n    \t\treturn {begin: begin, end: end};\r\n        }\r\n    }\r\n\r\n    isCompleted(): boolean {\r\n        let completed: boolean;\r\n        for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\r\n            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getPlaceholder(i: number) {\r\n        if (i < this.slotChar.length) {\r\n            return this.slotChar.charAt(i);\r\n        }\r\n        return this.slotChar.charAt(0);\r\n    }\r\n\r\n    seekNext(pos) {\r\n        while (++pos < this.len && !this.tests[pos]);\r\n        return pos;\r\n    }\r\n\r\n    seekPrev(pos) {\r\n        while (--pos >= 0 && !this.tests[pos]);\r\n        return pos;\r\n    }\r\n\r\n    shiftL(begin:number,end:number) {\r\n        let i, j;\r\n\r\n        if (begin<0) {\r\n            return;\r\n        }\r\n\r\n        for (i = begin, j = this.seekNext(end); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                if (j < this.len && this.tests[i].test(this.buffer[j])) {\r\n                    this.buffer[i] = this.buffer[j];\r\n                    this.buffer[j] = this.getPlaceholder(j);\r\n                } else {\r\n                    break;\r\n                }\r\n\r\n                j = this.seekNext(j);\r\n            }\r\n        }\r\n        this.writeBuffer();\r\n        this.caret(Math.max(this.firstNonMaskPos, begin));\r\n    }\r\n\r\n    shiftR(pos) {\r\n        let i, c, j, t;\r\n\r\n        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                j = this.seekNext(i);\r\n                t = this.buffer[i];\r\n                this.buffer[i] = c;\r\n                if (j < this.len && this.tests[j].test(t)) {\r\n                    c = t;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAndroidInput(e) {\r\n        var curVal = this.inputViewChild.nativeElement.value;\r\n        var pos = this.caret();\r\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length ) {\r\n            // a deletion or backspace happened\r\n            this.checkVal(true);\r\n            while (pos.begin > 0 && !this.tests[pos.begin-1])\r\n                  pos.begin--;\r\n            if (pos.begin === 0)\r\n            {\r\n               while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])\r\n                  pos.begin++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.caret(pos.begin, pos.begin);\r\n                this.updateModel(e);\r\n                if (this.isCompleted()) {\r\n                    this.onComplete.emit();\r\n                }\r\n            }, 0);\r\n        } \r\n        else {\r\n            this.checkVal(true);\r\n            while (pos.begin < this.len && !this.tests[pos.begin])\r\n                pos.begin++;\r\n\r\n            setTimeout(() => {\r\n                this.caret(pos.begin, pos.begin);\r\n                this.updateModel(e);\r\n                if (this.isCompleted()) {\r\n                    this.onComplete.emit();\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    onInputBlur(e) {\r\n        this.focused = false;\r\n        this.onModelTouched();\r\n        this.checkVal();\r\n        this.updateFilledState();\r\n        this.onBlur.emit(e);\r\n\r\n        if (this.inputViewChild.nativeElement.value != this.focusText || this.inputViewChild.nativeElement.value != this.value) {\r\n            this.updateModel(e);\r\n            let event = document.createEvent('HTMLEvents');\r\n            event.initEvent('change', true, false);\r\n            this.inputViewChild.nativeElement.dispatchEvent(event);\r\n        }\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n\r\n        let k = e.which||e.keyCode,\r\n            pos,\r\n            begin,\r\n            end;\r\n        let iPhone = /iphone/i.test(DomHandler.getUserAgent());\r\n        this.oldVal = this.inputViewChild.nativeElement.value;\r\n\r\n        //backspace, delete, and escape get special treatment\r\n        if (k === 8 || k === 46 || (iPhone && k === 127)) {\r\n            pos = this.caret();\r\n            begin = pos.begin;\r\n            end = pos.end;\r\n\r\n            if (end - begin === 0) {\r\n                begin=k!==46?this.seekPrev(begin):(end=this.seekNext(begin-1));\r\n                end=k===46?this.seekNext(end):end;\r\n            }\r\n\r\n            this.clearBuffer(begin, end);\r\n\t\t\tthis.shiftL(begin, end - 1);\r\n            this.updateModel(e);\r\n            this.onInput.emit(e);\r\n\r\n            e.preventDefault();\r\n        } \r\n        else if ( k === 13 ) { // enter\r\n            this.onInputBlur(e);\r\n            this.updateModel(e);\r\n        } \r\n        else if (k === 27) { // escape\r\n            this.inputViewChild.nativeElement.value = this.focusText;\r\n            this.caret(0, this.checkVal());\r\n            this.updateModel(e);\r\n\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    onKeyPress(e) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        var k = e.which || e.keyCode,\r\n            pos = this.caret(),\r\n            p,\r\n            c,\r\n            next,\r\n            completed;\r\n\r\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32  || (k > 34 && k < 41)) {//Ignore\r\n            return;\r\n        } else if ( k && k !== 13 ) {\r\n            if (pos.end - pos.begin !== 0){\r\n                this.clearBuffer(pos.begin, pos.end);\r\n                this.shiftL(pos.begin, pos.end-1);\r\n            }\r\n\r\n            p = this.seekNext(pos.begin - 1);\r\n            if (p < this.len) {\r\n                c = String.fromCharCode(k);\r\n                if (this.tests[p].test(c)) {\r\n                    this.shiftR(p);\r\n\r\n                    this.buffer[p] = c;\r\n                    this.writeBuffer();\r\n                    next = this.seekNext(p);\r\n\r\n                    if (/android/i.test(DomHandler.getUserAgent())) {\r\n                        //Path for CSP Violation on FireFox OS 1.1\r\n                        let proxy = () => {\r\n                            this.caret(next);\r\n                        };\r\n\r\n                        setTimeout(proxy,0);\r\n                    }\r\n                    else {\r\n                        this.caret(next);\r\n                    }\r\n\r\n                    if (pos.begin <= this.lastRequiredNonMaskPos) {\r\n                        completed = this.isCompleted();\r\n                    }\r\n\r\n                    this.onInput.emit(e);\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        }\r\n\r\n        this.updateModel(e);\r\n\r\n        this.updateFilledState();\r\n\r\n        if (completed) {\r\n            this.onComplete.emit();\r\n        }\r\n    }\r\n\r\n    clearBuffer(start, end) {\r\n        let i;\r\n        for (i = start; i < end && i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    writeBuffer() {\r\n        this.inputViewChild.nativeElement.value = this.buffer.join('');\r\n    }\r\n\r\n    checkVal(allow?: boolean) {\r\n        //try to place characters where they belong\r\n        let test = this.inputViewChild.nativeElement.value,\r\n            lastMatch = -1,\r\n            i,\r\n            c,\r\n            pos;\r\n\r\n        for (i = 0, pos = 0; i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n                while (pos++ < test.length) {\r\n                    c = test.charAt(pos - 1);\r\n                    if (this.tests[i].test(c)) {\r\n                        this.buffer[i] = c;\r\n                        lastMatch = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pos > test.length) {\r\n                    this.clearBuffer(i + 1, this.len);\r\n                    break;\r\n                }\r\n            } else {\r\n                if (this.buffer[i] === test.charAt(pos)) {\r\n                    pos++;\r\n                }\r\n                if ( i < this.partialPosition){\r\n                    lastMatch = i;\r\n                }\r\n            }\r\n        }\r\n        if (allow) {\r\n            this.writeBuffer();\r\n        } else if (lastMatch + 1 < this.partialPosition) {\r\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\r\n                // Invalid value. Remove it and replace it with the\r\n                // mask, which is the default behavior.\r\n                if (this.inputViewChild.nativeElement.value) this.inputViewChild.nativeElement.value = '';\r\n                this.clearBuffer(0, this.len);\r\n            } else {\r\n                // Invalid value, but we opt to show the value to the\r\n                // user and allow them to correct their mistake.\r\n                this.writeBuffer();\r\n            }\r\n        } else {\r\n            this.writeBuffer();\r\n            this.inputViewChild.nativeElement.value = this.inputViewChild.nativeElement.value.substring(0, lastMatch + 1);\r\n        }\r\n        return (this.partialPosition ? i : this.firstNonMaskPos);\r\n    }\r\n\r\n    onInputFocus(event) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        this.focused = true;\r\n\r\n        clearTimeout(this.caretTimeoutId);\r\n        let pos;\r\n\r\n        this.focusText = this.inputViewChild.nativeElement.value;\r\n\r\n        pos = this.checkVal();\r\n\r\n        this.caretTimeoutId = setTimeout(() => {\r\n            if (this.inputViewChild.nativeElement !== document.activeElement){\r\n                return;\r\n            }\r\n            this.writeBuffer();\r\n            if (pos == this.mask.replace(\"?\",\"\").length) {\r\n                this.caret(0, pos);\r\n            } else {\r\n                this.caret(pos);\r\n            }\r\n        }, 10);\r\n\r\n        this.onFocus.emit(event);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        if (this.androidChrome)\r\n            this.handleAndroidInput(event);\r\n        else\r\n            this.handleInputChange(event);\r\n\r\n        this.onInput.emit(event);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        if (this.readonly){\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            var pos = this.checkVal(true);\r\n            this.caret(pos);\r\n            this.updateModel(event);\r\n            if (this.isCompleted()) {\r\n                this.onComplete.emit();\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    getUnmaskedValue() {\r\n        let unmaskedBuffer = [];\r\n        for(let i = 0; i < this.buffer.length; i++) {\r\n            let c = this.buffer[i];\r\n            if (this.tests[i] && c != this.getPlaceholder(i)) {\r\n                unmaskedBuffer.push(c);\r\n            }\r\n        }\r\n\r\n        return unmaskedBuffer.join('');\r\n    }\r\n\r\n    updateModel(e) {\r\n        const updatedValue = this.unmask ? this.getUnmaskedValue() : e.target.value;\r\n        if (updatedValue !== null || updatedValue !== undefined) {\r\n            this.value = updatedValue;\r\n            this.onModelChange(this.value);\r\n        }\r\n    }\r\n\r\n    updateFilledState() {\r\n        this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\r\n    }\r\n\r\n    focus() {\r\n        this.inputViewChild.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,InputTextModule],\r\n    exports: [InputMask],\r\n    declarations: [InputMask]\r\n})\r\nexport class InputMaskModule { }\r\n"]}