{"version":3,"sources":["ng://primeng/treetable/treetable.ts"],"names":["TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","__decorate","Injectable","TreeTable","el","zone","tableService","lazy","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","cdkVirtualScroll","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","virtualScroll","virtualScrollCallback","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","__values","nodes_1_1","done","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","handleVirtualScroll","page","callback","run","virtualScrollTimer","clearTimeout","setTimeout","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","top","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollable","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","tableViewChild","containerWidth","element","removeClass","parent_1","parentElement","hasClass","table","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","__spread","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","isFilterBlank","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","__assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","Input","Output","ViewChild","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","TTBody","tt","TTScrollableView","scrollDispatcher","loadingArray","subscription","subscribe","runOutsideAngular","alignScrollBar","scrollLoadingTableViewChild","totalRecordsSubscription","setVirtualScrollerHeight","fill","_scrollHeight","setScrollHeight","ngAfterViewChecked","ngAfterViewInit","cdkViewpor","viewPortViewChild","bindEvents","scrollHeaderBoxViewChild","marginLeft","elementRef","scrollDispatcherSubscription","scrolled","frozen","scrollBodyViewChild","paddingBottom","calculateScrollbarWidth","frozenColumns","frozenWidth","frozenView","previousElementSibling","frozenSiblingBody","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","unbindEvents","scrollFooterBoxViewChild","scrollTop","viewport","getOuterHeight","tableHeight","scrollTableViewChild","pageHeight_1","pageCount","virtualScrollerViewChild","scrollBodyTop","parseFloat","page_1","floor","scrollHeight","indexOf","relativeHeight","visibility","containerHeight","includes","percentHeight","diffValue","scrollBodyHeight","maxHeight","hasVerticalOverflow","scrollBarWidth","marginRight","unsubscribe","ScrollDispatcher","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","TTSortIcon","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.ui-contextmenu-selected]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","CdkVirtualScrollViewportPatchDirective","viewportComponent","destroy$","fromEvent","window","pipe","debounceTime","takeUntil","checkViewportSize","complete","CdkVirtualScrollViewport","decorators","Self","Inject","args","__param","TreeTableModule","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, Inject, Self} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeNode } from 'primeng/api';\r\nimport { Subject, Subscription, fromEvent} from 'rxjs';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { PaginatorModule } from 'primeng/paginator';\r\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\r\nimport { SortMeta } from 'primeng/api';\r\nimport { BlockableUI } from 'primeng/api';\r\nimport { FilterMetadata } from 'primeng/api';\r\nimport { ObjectUtils } from 'primeng/utils';\r\nimport { FilterUtils } from 'primeng/utils';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { CdkVirtualScrollViewport, ScrollDispatcher } from '@angular/cdk/scrolling';\r\n\r\n@Injectable()\r\nexport class TreeTableService {\r\n\r\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\r\n    private selectionSource = new Subject();\r\n    private contextMenuSource = new Subject<any>();\r\n    private uiUpdateSource = new Subject<any>();\r\n    private totalRecordsSource = new Subject<any>();\r\n\r\n    sortSource$ = this.sortSource.asObservable();\r\n    selectionSource$ = this.selectionSource.asObservable();\r\n    contextMenuSource$ = this.contextMenuSource.asObservable();\r\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\r\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\r\n\r\n    onSort(sortMeta: SortMeta|SortMeta[]) {\r\n        this.sortSource.next(sortMeta);\r\n    }\r\n\r\n    onSelectionChange() {\r\n        this.selectionSource.next();\r\n    }\r\n\r\n    onContextMenu(node: any) {\r\n        this.contextMenuSource.next(node);\r\n    }\r\n\r\n    onUIUpdate(value: any) {\r\n        this.uiUpdateSource.next(value);\r\n    }\r\n\r\n    onTotalRecordsChange(value: number) {\r\n        this.totalRecordsSource.next(value);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTable',\r\n    template: `\r\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\r\n                [ngClass]=\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\r\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit')}\">\r\n            <div class=\"ui-treetable-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\r\n            <div class=\"ui-treetable-loading-content\" *ngIf=\"loading && showLoader\">\r\n                <i [class]=\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <div *ngIf=\"captionTemplate\" class=\"ui-treetable-caption ui-widget-header\">\r\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\r\n\r\n            <div class=\"ui-treetable-wrapper\" *ngIf=\"!scrollable\">\r\n                <table #table class=\"ui-treetable-table\">\r\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"ui-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                    <tfoot class=\"ui-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                    <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\r\n                </table>\r\n            </div>\r\n\r\n            <div class=\"ui-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\r\n               <div class=\"ui-treetable-scrollable-view ui-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\r\n               <div class=\"ui-treetable-scrollable-view\" [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\"></div>\r\n            </div>\r\n\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\r\n            <div *ngIf=\"summaryTemplate\" class=\"ui-treetable-summary ui-widget-header\">\r\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n            </div>\r\n\r\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\r\n\r\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\r\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\r\n        </div>\r\n    `,\r\n    providers: [TreeTableService],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\r\n\r\n    @Input() columns: any[];\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() autoLayout: boolean;\r\n\r\n    @Input() lazy: boolean = false;\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() defaultSortOrder: number = 1;\r\n\r\n    @Input() sortMode: string = 'single';\r\n\r\n    @Input() resetPageOnSort: boolean = true;\r\n\r\n    @Input() customSort: boolean;\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelection: any;\r\n\r\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelectionMode: string = \"separate\";\r\n\r\n    @Input() dataKey: string;\r\n\r\n    @Input() metaKeySelection: boolean;\r\n\r\n    @Input() compareSelectionBy: string = 'deepEquals';\r\n\r\n    @Input() rowHover: boolean;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() showLoader: boolean = true;\r\n\r\n    @Input() scrollable: boolean;\r\n\r\n    @Input() scrollHeight: string;\r\n\r\n    @Input() virtualScroll: boolean;\r\n\r\n    @Input() virtualScrollDelay: number = 150;\r\n\r\n    @Input() virtualRowHeight: number = 28;\r\n\r\n    @Input() frozenWidth: string;\r\n\r\n    @Input() frozenColumns: any[];\r\n\r\n    @Input() resizableColumns: boolean;\r\n\r\n    @Input() columnResizeMode: string = 'fit';\r\n\r\n    @Input() reorderableColumns: boolean;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\r\n\r\n    @Input() globalFilterFields: string[];\r\n\r\n    @Input() filterDelay: number = 300;\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() cdkVirtualScroll: boolean = false;\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('container') containerViewChild: ElementRef;\r\n\r\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\r\n\r\n    @ViewChild('table') tableViewChild: ElementRef;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    _value: TreeNode[] = [];\r\n\r\n    serializedValue: any[];\r\n\r\n    _totalRecords: number = 0;\r\n\r\n    _multiSortMeta: SortMeta[];\r\n\r\n    _sortField: string;\r\n\r\n    _sortOrder: number = 1;\r\n\r\n    virtualScrollTimer: any;\r\n\r\n    virtualScrollCallback: Function;\r\n\r\n    filteredNodes: any[];\r\n\r\n    filterTimeout: any;\r\n\r\n    colGroupTemplate: TemplateRef<any>;\r\n\r\n    captionTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    loadingBodyTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    summaryTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    frozenHeaderTemplate: TemplateRef<any>;\r\n\r\n    frozenBodyTemplate: TemplateRef<any>;\r\n\r\n    frozenFooterTemplate: TemplateRef<any>;\r\n\r\n    frozenColGroupTemplate: TemplateRef<any>;\r\n\r\n    lastResizerHelperX: number;\r\n\r\n    reorderIconWidth: number;\r\n\r\n    reorderIconHeight: number;\r\n\r\n    draggedColumn: any;\r\n\r\n    dropPosition: number;\r\n\r\n    preventSelectionSetterPropagation: boolean;\r\n\r\n    _selection: any;\r\n\r\n    selectionKeys: any = {};\r\n\r\n    cdkViewpor: CdkVirtualScrollViewport;\r\n\r\n    rowTouched: boolean;\r\n\r\n    editingCell: Element;\r\n\r\n    editingCellClick: boolean;\r\n\r\n    documentEditListener: any;\r\n\r\n    initialized: boolean;\r\n\r\n    toggleRowIndex: number;\r\n\r\n    ngOnInit() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'caption':\r\n                    this.captionTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'loadingbody':\r\n                    this.loadingBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n\r\n                case 'summary':\r\n                    this.summaryTemplate = item.template;\r\n                break;\r\n\r\n                case 'colgroup':\r\n                    this.colGroupTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessage':\r\n                    this.emptyMessageTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenheader':\r\n                    this.frozenHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenbody':\r\n                    this.frozenBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenfooter':\r\n                    this.frozenFooterTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozencolgroup':\r\n                    this.frozenColGroupTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\r\n\r\n    ngOnChanges(simpleChange: SimpleChanges) {\r\n        if (simpleChange.value) {\r\n            this._value = simpleChange.value.currentValue;\r\n\r\n            if (!this.lazy) {\r\n                this.totalRecords = (this._value ? this._value.length : 0);\r\n\r\n                if (this.sortMode == 'single' && this.sortField)\r\n                    this.sortSingle();\r\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\r\n                    this.sortMultiple();\r\n                else if (this.hasFilter())       //sort already filters\r\n                    this._filter();\r\n            }\r\n\r\n            if (this.virtualScroll && this.virtualScrollCallback) {\r\n                this.virtualScrollCallback();\r\n            }\r\n\r\n            this.updateSerializedValue();\r\n            this.tableService.onUIUpdate(this.value);\r\n        }\r\n\r\n        if (simpleChange.sortField) {\r\n            this._sortField = simpleChange.sortField.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.sortOrder) {\r\n            this._sortOrder = simpleChange.sortOrder.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.multiSortMeta) {\r\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\r\n            if (this.sortMode === 'multiple') {\r\n                this.sortMultiple();\r\n            }\r\n        }\r\n\r\n        if (simpleChange.selection) {\r\n            this._selection = simpleChange.selection.currentValue;\r\n\r\n            if (!this.preventSelectionSetterPropagation) {\r\n                this.updateSelectionKeys();\r\n                this.tableService.onSelectionChange();\r\n            }\r\n            this.preventSelectionSetterPropagation = false;\r\n        }\r\n    }\r\n\r\n    @Input() get value(): any[] {\r\n        return this._value;\r\n    }\r\n    set value(val: any[]) {\r\n        this._value = val;\r\n    }\r\n\r\n    updateSerializedValue() {\r\n        this.serializedValue = [];\r\n\r\n        if (this.paginator)\r\n            this.serializePageNodes();\r\n        else\r\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\r\n    }\r\n\r\n    serializeNodes(parent, nodes, level, visible) {\r\n        if (nodes && nodes.length) {\r\n            for(let node of nodes) {\r\n                node.parent = parent;\r\n                const rowNode = {\r\n                    node: node,\r\n                    parent: parent,\r\n                    level: level,\r\n                    visible: visible && (parent ? parent.expanded : true)\r\n                };\r\n                this.serializedValue.push(rowNode);\r\n\r\n                if (rowNode.visible && node.expanded) {\r\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    serializePageNodes() {\r\n        let data = this.filteredNodes || this.value;\r\n        this.serializedValue = [];\r\n        if (data && data.length) {\r\n            const first = this.lazy ? 0 : this.first;\r\n\r\n            for(let i = first; i < (first + this.rows); i++) {\r\n                let node = data[i];\r\n                if (node) {\r\n                    this.serializedValue.push({\r\n                        node: node,\r\n                        parent: null,\r\n                        level: 0,\r\n                        visible: true\r\n                    });\r\n\r\n                    this.serializeNodes(node, node.children, 1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n    set totalRecords(val: number) {\r\n        this._totalRecords = val;\r\n        this.tableService.onTotalRecordsChange(this._totalRecords);\r\n    }\r\n\r\n    @Input() get sortField(): string {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(val: string) {\r\n        this._sortField = val;\r\n    }\r\n\r\n    @Input() get sortOrder(): number {\r\n        return this._sortOrder;\r\n    }\r\n    set sortOrder(val: number) {\r\n        this._sortOrder = val;\r\n    }\r\n\r\n    @Input() get multiSortMeta(): SortMeta[] {\r\n        return this._multiSortMeta;\r\n    }\r\n\r\n    set multiSortMeta(val: SortMeta[]) {\r\n        this._multiSortMeta = val;\r\n    }\r\n\r\n    @Input() get selection(): any {\r\n        return this._selection;\r\n    }\r\n\r\n    set selection(val: any) {\r\n        this._selection = val;\r\n    }\r\n\r\n    updateSelectionKeys() {\r\n        if (this.dataKey && this._selection) {\r\n            this.selectionKeys = {};\r\n            if (Array.isArray(this._selection)) {\r\n                for(let node of this._selection) {\r\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\r\n                }\r\n            }\r\n            else {\r\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageChange(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy)\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        else\r\n            this.serializePageNodes();\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n\r\n        this.tableService.onUIUpdate(this.value);\r\n    }\r\n\r\n    sort(event) {\r\n        let originalEvent = event.originalEvent;\r\n\r\n        if (this.sortMode === 'single') {\r\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\r\n            this._sortField = event.field;\r\n            this.sortSingle();\r\n        }\r\n        if (this.sortMode === 'multiple') {\r\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\r\n            let sortMeta = this.getSortMeta(event.field);\r\n\r\n            if (sortMeta) {\r\n                if (!metaKey) {\r\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\r\n                }\r\n                else {\r\n                    sortMeta.order = sortMeta.order * -1;\r\n                }\r\n            }\r\n            else {\r\n                if (!metaKey || !this.multiSortMeta) {\r\n                    this._multiSortMeta = [];\r\n                }\r\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\r\n            }\r\n\r\n            this.sortMultiple();\r\n        }\r\n    }\r\n\r\n    sortSingle() {\r\n        if (this.sortField && this.sortOrder) {\r\n            if (this.resetPageOnSort) {\r\n                this.first = 0;\r\n            }\r\n\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n                this.sortNodes(this.value);\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            let sortMeta: SortMeta = {\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            };\r\n\r\n            this.onSort.emit(sortMeta);\r\n            this.tableService.onSort(sortMeta);\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    sortNodes(nodes) {\r\n        if (!nodes || nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: nodes,\r\n                mode: this.sortMode,\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            });\r\n        }\r\n        else {\r\n            nodes.sort((node1, node2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortNodes(node.children);\r\n        }\r\n    }\r\n\r\n    sortMultiple() {\r\n        if (this.multiSortMeta) {\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n               this.sortMultipleNodes(this.value);\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            this.onSort.emit({\r\n                multisortmeta: this.multiSortMeta\r\n            });\r\n            this.tableService.onSort(this.multiSortMeta);\r\n            this.updateSerializedValue();\r\n        }\r\n    }\r\n\r\n    sortMultipleNodes(nodes) {\r\n        if (!nodes || nodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.customSort) {\r\n            this.sortFunction.emit({\r\n                data: this.value,\r\n                mode: this.sortMode,\r\n                multiSortMeta: this.multiSortMeta\r\n            });\r\n        }\r\n        else {\r\n            this.value.sort((node1, node2) => {\r\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\r\n            });\r\n        }\r\n\r\n        for(let node of nodes) {\r\n            this.sortMultipleNodes(node.children);\r\n        }\r\n    }\r\n\r\n    multisortField(node1, node2, multiSortMeta, index) {\r\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\r\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\r\n        let result = null;\r\n\r\n        if (value1 == null && value2 != null)\r\n            result = -1;\r\n        else if (value1 != null && value2 == null)\r\n            result = 1;\r\n        else if (value1 == null && value2 == null)\r\n            result = 0;\r\n        if (typeof value1 == 'string' || value1 instanceof String) {\r\n            if (value1.localeCompare && (value1 != value2)) {\r\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\r\n            }\r\n        }\r\n        else {\r\n            result = (value1 < value2) ? -1 : 1;\r\n        }\r\n\r\n        if (value1 == value2) {\r\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\r\n        }\r\n\r\n        return (multiSortMeta[index].order * result);\r\n    }\r\n\r\n    getSortMeta(field: string) {\r\n        if (this.multiSortMeta && this.multiSortMeta.length) {\r\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\r\n                if (this.multiSortMeta[i].field === field) {\r\n                    return this.multiSortMeta[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isSorted(field: string) {\r\n        if (this.sortMode === 'single') {\r\n            return (this.sortField && this.sortField === field);\r\n        }\r\n        else if (this.sortMode === 'multiple') {\r\n            let sorted = false;\r\n            if (this.multiSortMeta)Â {\r\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\r\n                    if (this.multiSortMeta[i].field == field)Â {\r\n                        sorted = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return sorted;\r\n        }\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            filters: this.filters,\r\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\r\n            multiSortMeta: this.multiSortMeta\r\n        };\r\n    }\r\n\r\n    handleVirtualScroll(event) {\r\n        this.first = (event.page - 1) * this.rows;\r\n        this.virtualScrollCallback = event.callback;\r\n\r\n        this.zone.run(() => {\r\n            if (this.virtualScrollTimer) {\r\n                clearTimeout(this.virtualScrollTimer);\r\n            }\r\n\r\n            this.virtualScrollTimer = setTimeout(() => {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }, this.virtualScrollDelay);\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredNodes||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElementÂ {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\r\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    onColumnResizeEnd(event, column) {\r\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        let columnWidth = column.offsetWidth;\r\n        let newColumnWidth = columnWidth + delta;\r\n        let minWidth = column.style.minWidth || 15;\r\n\r\n        if (columnWidth + delta > parseInt(minWidth)) {\r\n            if (this.columnResizeMode === 'fit') {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\r\n                        if (this.scrollable) {\r\n                            let scrollableView = this.findParentScrollableView(column);\r\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\r\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\r\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\r\n                            let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        }\r\n                        else {\r\n                            column.style.width = newColumnWidth + 'px';\r\n                            if (nextColumn) {\r\n                                nextColumn.style.width = nextColumnWidth + 'px';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (this.columnResizeMode === 'expand') {\r\n                if (this.scrollable) {\r\n                    let scrollableView = this.findParentScrollableView(column);\r\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\r\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\r\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\r\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\r\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\r\n                    if (scrollableFooterTable) {\r\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\r\n                    }\r\n                    let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\r\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\r\n                }\r\n                else {\r\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\r\n                    column.style.width = newColumnWidth + 'px';\r\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\r\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\r\n                }\r\n            }\r\n\r\n            this.onColResize.emit({\r\n                element: column,\r\n                delta: delta\r\n            });\r\n        }\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\r\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\r\n    }\r\n\r\n    findParentScrollableView(column) {\r\n        if (column) {\r\n            let parent = column.parentElement;\r\n            while (parent && !DomHandler.hasClass(parent, 'ui-treetable-scrollable-view')) {\r\n                parent = parent.parentElement;\r\n            }\r\n\r\n            return parent;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\r\n        if (table) {\r\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                let col = colGroup.children[resizeColumnIndex];\r\n                let nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n                if (nextCol && nextColumnWidth) {\r\n                    nextCol.style.width = nextColumnWidth + 'px';\r\n                }\r\n            }\r\n            else {\r\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragStart(event, columnElement) {\r\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\r\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\r\n        this.draggedColumn = columnElement;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onColumnDragEnter(event, dropHeader) {\r\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\r\n            event.preventDefault();\r\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\r\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\r\n\r\n            if (this.draggedColumn != dropHeader) {\r\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\r\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\r\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\r\n\r\n                if (event.pageX > columnCenter) {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = 1;\r\n                }\r\n                else {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = -1;\r\n                }\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\r\n            }\r\n            else {\r\n                event.dataTransfer.dropEffect = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragLeave(event) {\r\n        if (this.reorderableColumns && this.draggedColumn) {\r\n            event.preventDefault();\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    onColumnDrop(event, dropColumn) {\r\n        event.preventDefault();\r\n        if (this.draggedColumn) {\r\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\r\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\r\n            let allowDrop = (dragIndex != dropIndex);\r\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\r\n                allowDrop = false;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\r\n                dropIndex = dropIndex + 1;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\r\n                dropIndex = dropIndex - 1;\r\n            }\r\n\r\n            if (allowDrop) {\r\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\r\n\r\n                this.onColReorder.emit({\r\n                    dragIndex: dragIndex,\r\n                    dropIndex: dropIndex,\r\n                    columns: this.columns\r\n                });\r\n            }\r\n\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n            this.draggedColumn.draggable = false;\r\n            this.draggedColumn = null;\r\n            this.dropPosition = null;\r\n        }\r\n    }\r\n\r\n    handleRowClick(event) {\r\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\r\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\r\n            return;\r\n        }\r\n\r\n        if (this.selectionMode) {\r\n            this.preventSelectionSetterPropagation = true;\r\n            let rowNode = event.rowNode;\r\n            let selected = this.isSelected(rowNode.node);\r\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\r\n\r\n            if (metaSelection) {\r\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\r\n\r\n                if (selected && metaKey) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(null);\r\n                    }\r\n                    else {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\r\n                }\r\n                else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(rowNode.node);\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        if (metaKey) {\r\n                            this._selection = this.selection||[];\r\n                        }\r\n                        else {\r\n                            this._selection = [];\r\n                            this.selectionKeys = {};\r\n                        }\r\n\r\n                        this._selection = [...this.selection, rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n\r\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\r\n                }\r\n            }\r\n            else {\r\n                if (this.selectionMode === 'single') {\r\n                    if (selected) {\r\n                        this._selection = null;\r\n                        this.selectionKeys = {};\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                    }\r\n                    else {\r\n                        this._selection = rowNode.node;\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys = {};\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.selectionMode === 'multiple') {\r\n                    if (selected) {\r\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\r\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\r\n                        this.selectionChange.emit(this.selection);\r\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\r\n                        if (dataKeyValue) {\r\n                            this.selectionKeys[dataKeyValue] = 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.tableService.onSelectionChange();\r\n        }\r\n\r\n        this.rowTouched = false;\r\n    }\r\n\r\n    handleRowTouchEnd(event) {\r\n        this.rowTouched = true;\r\n    }\r\n\r\n    handleRowRightClick(event) {\r\n        if (this.contextMenu) {\r\n            const node = event.rowNode.node;\r\n\r\n            if (this.contextMenuSelectionMode === 'separate') {\r\n                this.contextMenuSelection = node;\r\n                this.contextMenuSelectionChange.emit(node);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.tableService.onContextMenu(node);\r\n            }\r\n            else if (this.contextMenuSelectionMode === 'joint') {\r\n                this.preventSelectionSetterPropagation = true;\r\n                let selected = this.isSelected(node);\r\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this.selection = node;\r\n                        this.selectionChange.emit(node);\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        this.selection = [node];\r\n                        this.selectionChange.emit(this.selection);\r\n                    }\r\n\r\n                    if (dataKeyValue) {\r\n                        this.selectionKeys[dataKeyValue] = 1;\r\n                    }\r\n                }\r\n\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleNodeWithCheckbox(event) {\r\n        this.selection = this.selection||[];\r\n        this.preventSelectionSetterPropagation = true;\r\n        let node = event.rowNode.node;\r\n        let selected = this.isSelected(node);\r\n\r\n        if (selected) {\r\n            this.propagateSelectionDown(node, false);\r\n            if (event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, false);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n        }\r\n        else {\r\n            this.propagateSelectionDown(node, true);\r\n            if (event.rowNode.parent) {\r\n                this.propagateSelectionUp(node.parent, true);\r\n            }\r\n            this.selectionChange.emit(this.selection);\r\n            this.onNodeSelect.emit({originalEvent: event, node: node});\r\n        }\r\n\r\n        this.tableService.onSelectionChange();\r\n    }\r\n\r\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\r\n        let data = this.filteredNodes || this.value;\r\n        this._selection = check && data ? data.slice() : [];\r\n        if (check) {\r\n            if (data && data.length) {\r\n                for (let node of data) {\r\n                    this.propagateSelectionDown(node, true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._selection = [];\r\n            this.selectionKeys = {};\r\n        }\r\n\r\n        this.preventSelectionSetterPropagation = true;\r\n        this.selectionChange.emit(this._selection);\r\n        this.tableService.onSelectionChange();\r\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\r\n    }\r\n\r\n    propagateSelectionUp(node: TreeNode, select: boolean) {\r\n        if (node.children && node.children.length) {\r\n            let selectedChildCount: number = 0;\r\n            let childPartialSelected: boolean = false;\r\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n            for (let child of node.children) {\r\n                if (this.isSelected(child))\r\n                selectedChildCount++;\r\n                else if (child.partialSelected)\r\n                    childPartialSelected = true;\r\n            }\r\n\r\n            if (select && selectedChildCount == node.children.length) {\r\n                this._selection =  [...this.selection||[], node];\r\n                node.partialSelected = false;\r\n                if (dataKeyValue) {\r\n                    this.selectionKeys[dataKeyValue] = 1;\r\n                }\r\n            }\r\n            else {\r\n                if (!select) {\r\n                    let index = this.findIndexInSelection(node);\r\n                    if (index >= 0) {\r\n                        this._selection =  this.selection.filter((val,i) => i!=index);\r\n\r\n                        if (dataKeyValue) {\r\n                            delete this.selectionKeys[dataKeyValue];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\r\n                    node.partialSelected = true;\r\n                else\r\n                    node.partialSelected = false;\r\n            }\r\n        }\r\n\r\n        let parent = node.parent;\r\n        if (parent) {\r\n            this.propagateSelectionUp(parent, select);\r\n        }\r\n    }\r\n\r\n    propagateSelectionDown(node: TreeNode, select: boolean) {\r\n        let index = this.findIndexInSelection(node);\r\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\r\n\r\n        if (select && index == -1) {\r\n            this._selection =  [...this.selection||[],node]\r\n            if (dataKeyValue) {\r\n                this.selectionKeys[dataKeyValue] = 1;\r\n            }\r\n        }\r\n        else if (!select && index > -1) {\r\n            this._selection =  this.selection.filter((val,i) => i!=index);\r\n            if (dataKeyValue) {\r\n                delete this.selectionKeys[dataKeyValue];\r\n            }\r\n        }\r\n\r\n        node.partialSelected = false;\r\n\r\n        if (node.children && node.children.length) {\r\n            for (let child of node.children) {\r\n                this.propagateSelectionDown(child, select);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node) {\r\n        if (node && this.selection) {\r\n            if (this.dataKey) {\r\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\r\n            }\r\n            else {\r\n                if (this.selection instanceof Array)\r\n                    return this.findIndexInSelection(node) > -1;\r\n                else\r\n                    return this.equals(node, this.selection);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findIndexInSelection(node: any) {\r\n        let index: number = -1;\r\n        if (this.selection && this.selection.length) {\r\n            for (let i = 0; i < this.selection.length; i++) {\r\n                if (this.equals(node, this.selection[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode === 'multiple';\r\n    }\r\n\r\n    equals(node1, node2) {\r\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\r\n    }\r\n\r\n    filter(value, field, matchMode) {\r\n        if (this.filterTimeout) {\r\n            clearTimeout(this.filterTimeout);\r\n        }\r\n\r\n        if (!this.isFilterBlank(value)) {\r\n            this.filters[field] = { value: value, matchMode: matchMode };\r\n        } else if (this.filters[field]) {\r\n            delete this.filters[field];\r\n        }\r\n\r\n        this.filterTimeout = setTimeout(() => {\r\n            this._filter();\r\n            this.filterTimeout = null;\r\n        }, this.filterDelay);\r\n    }\r\n\r\n    filterGlobal(value, matchMode) {\r\n        this.filter(value, 'global', matchMode);\r\n    }\r\n\r\n    isFilterBlank(filter: any): boolean {\r\n        if (filter !== null && filter !== undefined) {\r\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _filter() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            if (!this.value) {\r\n                return;\r\n            }\r\n\r\n            if (!this.hasFilter()) {\r\n                this.filteredNodes = null;\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n            else {\r\n                let globalFilterFieldsArray;\r\n                if (this.filters['global']) {\r\n                    if (!this.columns && !this.globalFilterFields)\r\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\r\n                    else\r\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\r\n                }\r\n\r\n                this.filteredNodes = [];\r\n                const isStrictMode = this.filterMode === 'strict';\r\n                let isValueChanged = false;\r\n\r\n                for (let node of this.value) {\r\n                    let copyNode = {...node};\r\n                    let localMatch = true;\r\n                    let globalMatch = false;\r\n                    let paramsWithoutNode;\r\n\r\n                    for (let prop in this.filters) {\r\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\r\n                            let filterMeta = this.filters[prop];\r\n                            let filterField = prop;\r\n                            let filterValue = filterMeta.value;\r\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\r\n                            let filterConstraint = FilterUtils[filterMatchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\r\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\r\n                                    localMatch = false;\r\n                            }\r\n\r\n                            if (!localMatch) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\r\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\r\n                            let copyNodeForGlobal = {...copyNode};\r\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\r\n                            let filterValue = this.filters['global'].value;\r\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\r\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\r\n\r\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\r\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\r\n                                    globalMatch = true;\r\n                                    copyNode = copyNodeForGlobal;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let matches = localMatch;\r\n                    if (this.filters['global']) {\r\n                        matches = localMatch && globalMatch;\r\n                    }\r\n\r\n                    if (matches) {\r\n                        this.filteredNodes.push(copyNode);\r\n                    }\r\n\r\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\r\n                }\r\n\r\n                if (!isValueChanged) {\r\n                    this.filteredNodes = null;\r\n                }\r\n\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.first = 0;\r\n\r\n        const filteredValue = this.filteredNodes || this.value;\r\n\r\n        this.onFilter.emit({\r\n            filters: this.filters,\r\n            filteredValue: filteredValue\r\n        });\r\n\r\n        this.tableService.onUIUpdate(filteredValue);\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    findFilteredNodes(node, paramsWithoutNode) {\r\n        if (node) {\r\n            let matched = false;\r\n            if (node.children) {\r\n                let childNodes = [...node.children];\r\n                node.children = [];\r\n                for (let childNode of childNodes) {\r\n                    let copyChildNode = {...childNode};\r\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\r\n                        matched = true;\r\n                        node.children.push(copyChildNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (matched) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\r\n        let matched = false;\r\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\r\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\r\n            matched = true;\r\n        }\r\n\r\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\r\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\r\n        }\r\n\r\n        return matched;\r\n    }\r\n\r\n    isNodeLeaf(node) {\r\n        return node.leaf === false ? false : !(node.children && node.children.length);\r\n    }\r\n\r\n    hasFilter() {\r\n        let empty = true;\r\n        for (let prop in this.filters) {\r\n            if (this.filters.hasOwnProperty(prop)) {\r\n                empty = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return !empty;\r\n    }\r\n\r\n    public reset() {\r\n        this._sortField = null;\r\n        this._sortOrder = 1;\r\n        this._multiSortMeta = null;\r\n        this.tableService.onSort(null);\r\n\r\n        this.filteredNodes = null;\r\n        this.filters = {};\r\n\r\n        this.first = 0;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            this.totalRecords = (this._value ? this._value.length : 0);\r\n        }\r\n    }\r\n\r\n    updateEditingCell(cell) {\r\n        this.editingCell = cell;\r\n        this.bindDocumentEditListener();\r\n    }\r\n\r\n    isEditingCellValid() {\r\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\r\n    }\r\n\r\n    bindDocumentEditListener() {\r\n        if (!this.documentEditListener) {\r\n            this.documentEditListener = (event) => {\r\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\r\n                    this.editingCell = null;\r\n                    this.unbindDocumentEditListener();\r\n                }\r\n\r\n                this.editingCellClick = false;\r\n            };\r\n\r\n            document.addEventListener('click', this.documentEditListener);\r\n        }\r\n    }\r\n\r\n    unbindDocumentEditListener() {\r\n        if (this.documentEditListener) {\r\n            document.removeEventListener('click', this.documentEditListener);\r\n            this.documentEditListener = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentEditListener();\r\n        this.editingCell = null;\r\n        this.initialized = null;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: '[pTreeTableBody]',\r\n    template: `\r\n    <ng-container *ngIf=\"tt.cdkVirtualScroll\">\r\n        <ng-container *cdkVirtualFor=\"let serializedNode of tt.serializedValue; trackBy: tt.rowTrackBy; let i = index; templateCacheSize: 0\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template *ngIf=\"!tt.cdkVirtualScroll\" ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\r\n        <ng-container *ngIf=\"serializedNode.visible\">\r\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\r\n        </ng-container>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"tt.isEmpty()\">\r\n        <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\r\n    </ng-container>\r\n    `\r\n})\r\nexport class TTBody {\r\n\r\n    @Input(\"pTreeTableBody\") columns: any[];\r\n\r\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\r\n\r\n    constructor(public tt: TreeTable) {}\r\n}\r\n\r\n@Component({\r\n    selector: '[ttScrollableView]',\r\n    template: `\r\n        <div #scrollHeader class=\"ui-treetable-scrollable-header ui-widget-header\">\r\n            <div #scrollHeaderBox class=\"ui-treetable-scrollable-header-box\">\r\n                <table class=\"ui-treetable-scrollable-header-table\" #tableHeader>\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"ui-treetable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <div #scrollBody class=\"ui-treetable-scrollable-body\">\r\n            <div *ngIf=\"tt.cdkVirtualScroll\" #virtualScrollBody>\r\n                <cdk-virtual-scroll-viewport #viewport itemSize=\"22\" style=\"height:550px;\">\r\n                    <table #scrollTable [ngClass]=\"{'ui-treetable-scrollable-body-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                        <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\"></tbody>\r\n                    </table>\r\n                </cdk-virtual-scroll-viewport>\r\n            </div>\r\n\r\n            <table #scrollTable [ngClass]=\"{'ui-treetable-scrollable-body-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\" *ngIf=\"!tt.cdkVirtualScroll\">\r\n                <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                <tbody class=\"ui-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\"></tbody>\r\n            </table>\r\n\r\n            <table #loadingTable *ngIf=\"tt.virtualScroll && tt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-treetable-scrollable-body-table ui-treetable-loading-virtual-table': true, 'ui-treetable-virtual-table': tt.virtualScroll}\">\r\n                <tbody class=\"ui-treetable-tbody\">\r\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\r\n                        <ng-container *ngTemplateOutlet=\"tt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\r\n                    </ng-template>\r\n                </tbody>\r\n            </table>\r\n            <div #virtualScroller class=\"ui-treetable-virtual-scroller\" *ngIf=\"tt.virtualScroll\"></div>\r\n        </div>\r\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"ui-treetable-scrollable-footer ui-widget-header\">\r\n            <div #scrollFooterBox class=\"ui-treetable-scrollable-footer-box\">\r\n                <table class=\"ui-treetable-scrollable-footer-table\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tfoot class=\"ui-treetable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {\r\n\r\n    @Input(\"ttScrollableView\") columns: any[];\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\r\n\r\n    @ViewChild('viewport') viewPortViewChild: CdkVirtualScrollViewport;\r\n\r\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('virtualScroller') virtualScrollerViewChild: ElementRef;\r\n\r\n    headerScrollListener: Function;\r\n\r\n    bodyScrollListener: Function;\r\n\r\n    footerScrollListener: Function;\r\n\r\n    frozenSiblingBody: Element;\r\n\r\n    _scrollHeight: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    totalRecordsSubscription: Subscription;\r\n\r\n    initialized: boolean;\r\n\r\n    loadingArray: number[] = [];\r\n\r\n    scrollDispatcherSubscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone, private scrollDispatcher: ScrollDispatcher,) {\r\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            this.zone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    this.alignScrollBar();\r\n                    this.initialized = true;\r\n\r\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\r\n                    }\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        if (this.tt.virtualScroll) {\r\n            this.totalRecordsSubscription = this.tt.tableService.totalRecordsSource$.subscribe(() => {\r\n                this.zone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.setVirtualScrollerHeight();\r\n                    }, 50);\r\n                });\r\n            });\r\n        }\r\n\r\n        this.loadingArray = Array(this.tt.rows).fill(1);\r\n\r\n        this.initialized = false;\r\n     }\r\n\r\n    @Input() get scrollHeight(): string {\r\n        return this._scrollHeight;\r\n    }\r\n    set scrollHeight(val: string) {\r\n        this._scrollHeight = val;\r\n        this.setScrollHeight();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\r\n            this.alignScrollBar();\r\n            this.initialized = true;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.tt.cdkViewpor = this.viewPortViewChild;\r\n        this.bindEvents();\r\n        this.setScrollHeight();\r\n        this.alignScrollBar();\r\n\r\n        if (this.tt.cdkVirtualScroll) {\r\n          this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n              this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.viewPortViewChild.elementRef.nativeElement.scrollLeft + 'px';\r\n          })\r\n\r\n          this.scrollDispatcherSubscription = this.scrollDispatcher.scrolled()\r\n              .subscribe(() => {\r\n                  this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.viewPortViewChild.elementRef.nativeElement.scrollLeft + 'px';\r\n          });\r\n        }\r\n\r\n        if (!this.frozen) {\r\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\r\n                DomHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\r\n            }\r\n\r\n            if (this.tt.frozenWidth) {\r\n                this.el.nativeElement.style.left = this.tt.frozenWidth;\r\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.tt.frozenWidth + ')';\r\n            }\r\n\r\n            let frozenView = this.el.nativeElement.previousElementSibling;\r\n            if (frozenView) {\r\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\r\n            }\r\n        }\r\n        else {\r\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = DomHandler.calculateScrollbarWidth() + 'px';\r\n        }\r\n\r\n        if (this.tt.virtualScroll) {\r\n            this.setVirtualScrollerHeight();\r\n\r\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\r\n            }\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\r\n\r\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\r\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\r\n            }\r\n\r\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n                this.footerScrollListener = this.onFooterScroll.bind(this);\r\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\r\n            }\r\n\r\n            if (!this.frozen) {\r\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\r\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\r\n        }\r\n\r\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n    }\r\n\r\n    onHeaderScroll(event) {\r\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\r\n    }\r\n\r\n    onFooterScroll(event) {\r\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\r\n    }\r\n\r\n    onBodyScroll(event) {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.frozenSiblingBody) {\r\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\r\n        }\r\n\r\n        if (this.tt.virtualScroll) {\r\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\r\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\r\n            let pageHeight = this.tt.virtualRowHeight * this.tt.rows;\r\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\r\n            let pageCount = (virtualTableHeight / pageHeight)||1;\r\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top||'0';\r\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) ||Â (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\r\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\r\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\r\n                }\r\n\r\n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\r\n                this.tt.handleVirtualScroll({\r\n                    page: page,\r\n                    callback: () => {\r\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\r\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\r\n                        }\r\n\r\n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\r\n\r\n                        if (this.frozenSiblingBody) {\r\n                            (<HTMLElement> this.frozenSiblingBody.children[0]).style.top = this.scrollTableViewChild.nativeElement.style.top;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setScrollHeight() {\r\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\r\n            if (this.scrollHeight.indexOf('%') !== -1) {\r\n                let relativeHeight;\r\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\r\n                this.scrollBodyViewChild.nativeElement.style.height = '100px';     //temporary height to calculate static height\r\n                let containerHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.children[0]);\r\n\r\n                if (this.scrollHeight.includes(\"calc\")) {\r\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\r\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\r\n                    relativeHeight = (DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\r\n                }\r\n                else {\r\n                    relativeHeight = DomHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\r\n                }\r\n\r\n                let staticHeight = containerHeight - 100;   //total height of headers, footers, paginators\r\n                let scrollBodyHeight = (relativeHeight - staticHeight);\r\n\r\n                if (this.frozen) {\r\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\r\n                }\r\n\r\n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\r\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\r\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\r\n            }\r\n            else {\r\n                if (this.frozen)\r\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - DomHandler.calculateScrollbarWidth()) + 'px';\r\n                else\r\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    setVirtualScrollerHeight() {\r\n        if (this.virtualScrollerViewChild.nativeElement) {\r\n            this.virtualScrollerViewChild.nativeElement.style.height = this.tt.totalRecords * this.tt.virtualRowHeight + 'px';\r\n        }\r\n    }\r\n\r\n    hasVerticalOverflow() {\r\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\r\n    }\r\n\r\n    alignScrollBar() {\r\n        if (!this.frozen) {\r\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\r\n\r\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\r\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\r\n            }\r\n        }\r\n        this.initialized = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n\r\n        this.frozenSiblingBody = null;\r\n\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n\r\n        if (this.totalRecordsSubscription) {\r\n            this.totalRecordsSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.tt.cdkVirtualScroll) {\r\n            this.scrollDispatcherSubscription.unsubscribe();\r\n        }\r\n\r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSortableColumn]',\r\n    host: {\r\n        '[class.ui-sortable-column]': 'isEnabled()',\r\n        '[class.ui-state-highlight]': 'sorted',\r\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\r\n    }\r\n})\r\nexport class TTSortableColumn implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSortableColumn\") field: string;\r\n\r\n    @Input() ttSortableColumnDisabled: boolean;\r\n\r\n    sorted: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n                this.updateSortState();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n        }\r\n    }\r\n\r\n    updateSortState() {\r\n        this.sorted = this.tt.isSorted(this.field);\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n            this.tt.sort({\r\n                originalEvent: event,\r\n                field: this.field\r\n            });\r\n\r\n            DomHandler.clearSelection();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKey(event: MouseEvent) {\r\n        this.onClick(event);\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSortableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableSortIcon',\r\n    template: `\r\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\r\n    `\r\n})\r\nexport class TTSortIcon implements OnInit, OnDestroy {\r\n\r\n    @Input() field: string;\r\n\r\n    @Input() ariaLabelDesc: string;\r\n\r\n    @Input() ariaLabelAsc: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    sortOrder: number;\r\n\r\n    constructor(public tt: TreeTable) {\r\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\r\n            this.updateSortState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.updateSortState();\r\n    }\r\n\r\n    onClick(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    updateSortState() {\r\n        if (this.tt.sortMode === 'single') {\r\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\r\n        }\r\n        else if (this.tt.sortMode === 'multiple') {\r\n            let sortMeta = this.tt.getSortMeta(this.field);\r\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttResizableColumn]'\r\n})\r\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttResizableColumnDisabled: boolean;\r\n\r\n    resizer: HTMLSpanElement;\r\n\r\n    resizerMouseDownListener: any;\r\n\r\n    documentMouseMoveListener: any;\r\n\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'ui-column-resizer ui-clickable';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.zone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        this.tt.onColumnResizeBegin(event);\r\n        this.bindDocumentEvents();\r\n    }\r\n\r\n    onDocumentMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onDocumentMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttResizableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttReorderableColumn]'\r\n})\r\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() ttReorderableColumnDisabled: boolean;\r\n\r\n    dragStartListener: any;\r\n\r\n    dragOverListener: any;\r\n\r\n    dragEnterListener: any;\r\n\r\n    dragLeaveListener: any;\r\n\r\n    mouseDownListener: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n\r\n            this.dragStartListener = this.onDragStart.bind(this);\r\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\r\n\r\n            this.dragOverListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n\r\n            this.dragEnterListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\r\n\r\n            this.dragLeaveListener = this.onDragLeave.bind(this);\r\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n        }\r\n\r\n        if (this.dragOverListener) {\r\n            document.removeEventListener('dragover', this.dragOverListener);\r\n            this.dragOverListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragLeaveListener) {\r\n            document.removeEventListener('dragleave', this.dragLeaveListener);\r\n            this.dragLeaveListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        if (event.target.nodeName === 'INPUT' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\r\n            this.el.nativeElement.draggable = false;\r\n        else\r\n            this.el.nativeElement.draggable = true;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        this.tt.onColumnDragLeave(event);\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.onColumnDrop(event, this.el.nativeElement);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttReorderableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRow]',\r\n    host: {\r\n        '[class.ui-state-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRow implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRow\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onEnterKey(event: KeyboardEvent) {\r\n        if (event.which === 13) {\r\n            this.onClick(event);\r\n        }\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    onTouchEnd(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowTouchEnd(event);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttSelectableRowDblClick]',\r\n    host: {\r\n        '[class.ui-state-highlight]': 'selected'\r\n    }\r\n})\r\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\r\n\r\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\r\n\r\n    @Input() ttSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.tt.isSelected(this.rowNode.node);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.tt.isSelected(this.rowNode.node);\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttContextMenuRow]',\r\n    host: {\r\n        '[class.ui-contextmenu-selected]': 'selected',\r\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\r\n    }\r\n})\r\nexport class TTContextMenuRow {\r\n\r\n    @Input(\"ttContextMenuRow\") rowNode: any;\r\n\r\n    @Input() ttContextMenuRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\r\n                this.selected = this.tt.equals(this.rowNode.node, node);\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onContextMenu(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.tt.handleRowRightClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n\r\n            this.el.nativeElement.focus();\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttContextMenuRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCheckbox',\r\n    template: `\r\n        <div class=\"ui-chkbox ui-treetable-chkbox ui-widget\" (click)=\"onClick($event)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\r\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"ui-chkbox-icon ui-clickable pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTCheckbox  {\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input(\"value\") rowNode: any;\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.tt.isSelected(this.rowNode.node);\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.tt.isSelected(this.rowNode.node);\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if (!this.disabled) {\r\n            this.tt.toggleNodeWithCheckbox({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode\r\n            });\r\n        }\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableHeaderCheckbox',\r\n    template: `\r\n        <div class=\"ui-chkbox ui-treetable-header-chkbox ui-widget\" (click)=\"onClick($event, cb.checked)\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\r\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class TTHeaderCheckbox  {\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    disabled: boolean;\r\n\r\n    selectionChangeSubscription: Subscription;\r\n\r\n    valueChangeSubscription: Subscription;\r\n\r\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\r\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n\r\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.updateCheckedState();\r\n    }\r\n\r\n    onClick(event: Event, checked) {\r\n        if (this.tt.value && this.tt.value.length > 0) {\r\n            this.tt.toggleNodesWithCheckbox(event, !checked);\r\n        }\r\n\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.selectionChangeSubscription) {\r\n            this.selectionChangeSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.valueChangeSubscription) {\r\n            this.valueChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    updateCheckedState() {\r\n        let checked: boolean;\r\n        const data = this.tt.filteredNodes||this.tt.value;\r\n\r\n        if (data) {\r\n            for (let node of data) {\r\n                if (this.tt.isSelected(node)) {\r\n                    checked = true;\r\n                }\r\n                else  {\r\n                    checked = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            checked = false;\r\n        }\r\n\r\n        return checked;\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttEditableColumn]'\r\n})\r\nexport class TTEditableColumn implements AfterViewInit {\r\n\r\n    @Input(\"ttEditableColumn\") data: any;\r\n\r\n    @Input(\"ttEditableColumnField\") field: any;\r\n\r\n    @Input() ttEditableColumnDisabled: boolean;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.tt.editingCellClick = true;\r\n\r\n            if (this.tt.editingCell) {\r\n                if (this.tt.editingCell !== this.el.nativeElement) {\r\n                    if (!this.tt.isEditingCellValid()) {\r\n                        return;\r\n                    }\r\n\r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.openCell();\r\n                }\r\n            }\r\n            else {\r\n                this.openCell();\r\n            }\r\n        }\r\n    }\r\n\r\n    openCell() {\r\n        this.tt.updateEditingCell(this.el.nativeElement);\r\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\r\n                if (focusable) {\r\n                    focusable.focus();\r\n                }\r\n            }, 50);\r\n        });\r\n    }\r\n\r\n    closeEditingCell() {\r\n        DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n        this.tt.editingCell = null;\r\n        this.tt.unbindDocumentEditListener();\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            //enter\r\n            if (event.keyCode == 13) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n\r\n            //escape\r\n            else if (event.keyCode == 27) {\r\n                if (this.tt.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n                    this.closeEditingCell();\r\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\r\n                }\r\n\r\n                event.preventDefault();\r\n            }\r\n\r\n            //tab\r\n            else if (event.keyCode == 9) {\r\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\r\n\r\n                if (event.shiftKey)\r\n                    this.moveToPreviousCell(event);\r\n                else\r\n                    this.moveToNextCell(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    findCell(element) {\r\n        if (element) {\r\n            let cell = element;\r\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\r\n                cell = cell.parentElement;\r\n            }\r\n\r\n            return cell;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    moveToPreviousCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findPreviousEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    moveToNextCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        let row = currentCell.parentElement;\r\n        let targetCell = this.findNextEditableColumn(currentCell);\r\n\r\n        if (targetCell) {\r\n            DomHandler.invokeElementMethod(targetCell, 'click');\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    findPreviousEditableColumn(cell: Element) {\r\n        let prevCell = cell.previousElementSibling;\r\n\r\n        if (!prevCell) {\r\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\r\n            if (previousRow) {\r\n                prevCell = previousRow.lastElementChild;\r\n            }\r\n        }\r\n\r\n        if (prevCell) {\r\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\r\n                return prevCell;\r\n            else\r\n                return this.findPreviousEditableColumn(prevCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findNextEditableColumn(cell: Element) {\r\n        let nextCell = cell.nextElementSibling;\r\n\r\n        if (!nextCell) {\r\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\r\n            if (nextRow) {\r\n                nextCell = nextRow.firstElementChild;\r\n            }\r\n        }\r\n\r\n        if (nextCell) {\r\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\r\n                return nextCell;\r\n            else\r\n                return this.findNextEditableColumn(nextCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.ttEditableColumnDisabled !== true;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableCellEditor',\r\n    template: `\r\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\r\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\r\n        </ng-container>\r\n    `\r\n})\r\nexport class TreeTableCellEditor implements AfterContentInit {\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    inputTemplate: TemplateRef<any>;\r\n\r\n    outputTemplate: TemplateRef<any>;\r\n\r\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'input':\r\n                    this.inputTemplate = item.template;\r\n                    break;\r\n\r\n                case 'output':\r\n                    this.outputTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[ttRow]',\r\n    host: {\r\n        '[attr.tabindex]': '\"0\"'\r\n    }\r\n})\r\nexport class TTRow {\r\n\r\n    @Input('ttRow') rowNode: any;\r\n\r\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                let nextRow = this.el.nativeElement.nextElementSibling;\r\n                if (nextRow) {\r\n                    nextRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //down arrow\r\n            case 38:\r\n                let prevRow = this.el.nativeElement.previousElementSibling;\r\n                if (prevRow) {\r\n                    prevRow.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = false;\r\n\r\n                    this.tt.onNodeCollapse.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.rowNode.node.expanded) {\r\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\r\n                    this.rowNode.node.expanded = true;\r\n\r\n                    this.tt.onNodeExpand.emit({\r\n                        originalEvent: event,\r\n                        node: this.rowNode.node\r\n                    });\r\n\r\n                    this.tt.updateSerializedValue();\r\n                    this.tt.tableService.onUIUpdate(this.tt.value);\r\n                    this.restoreFocus();\r\n                }\r\n            break;\r\n        }\r\n    }\r\n\r\n    restoreFocus() {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.ui-treetable-tbody').children[this.tt.toggleRowIndex];\r\n                if (row) {\r\n                    row.focus();\r\n                }\r\n            }, 25);\r\n        });\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-treeTableToggler',\r\n    template: `\r\n        <a class=\"ui-treetable-toggler ui-unselectable-text\" (click)=\"onClick($event)\"\r\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\r\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\r\n        </a>\r\n    `\r\n})\r\nexport class TreeTableToggler {\r\n\r\n    @Input() rowNode: any;\r\n\r\n    constructor(public tt: TreeTable) {}\r\n\r\n    onClick(event: Event) {\r\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\r\n\r\n        if (this.rowNode.node.expanded) {\r\n            this.tt.onNodeExpand.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n        else {\r\n            this.tt.onNodeCollapse.emit({\r\n                originalEvent: event,\r\n                node: this.rowNode.node\r\n            });\r\n        }\r\n\r\n        this.tt.updateSerializedValue();\r\n        this.tt.tableService.onUIUpdate(this.tt.value);\r\n\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: 'cdk-virtual-scroll-viewport'\r\n})\r\nexport class CdkVirtualScrollViewportPatchDirective implements OnInit, OnDestroy {\r\n\tprotected readonly destroy$ = new Subject();\r\n\r\n\tconstructor(\r\n\t\t@Self() @Inject(CdkVirtualScrollViewport) private readonly viewportComponent: CdkVirtualScrollViewport,\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\tfromEvent(window, 'resize')\r\n\t\t\t.pipe(\r\n\t\t\t\tdebounceTime(10),\r\n\t\t\t\ttakeUntil(this.destroy$),\r\n\t\t\t)\r\n\t\t\t.subscribe(() => this.viewportComponent.checkViewportSize())\r\n\t\t;\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.destroy$.next();\r\n\t\tthis.destroy$.complete();\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,PaginatorModule, ScrollingModule],\r\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule,CdkVirtualScrollViewportPatchDirective],\r\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,CdkVirtualScrollViewportPatchDirective]\r\n})\r\nexport class TreeTableModule { }\r\n"]}