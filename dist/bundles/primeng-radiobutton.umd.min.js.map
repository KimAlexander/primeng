{"version":3,"sources":["ng://primeng/radiobutton/radiobutton.ts"],"names":["RADIO_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RadioButton","multi","cd","this","onClick","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","prototype","handleClick","event","radioButton","focus","preventDefault","disabled","select","inputViewChild","nativeElement","checked","value","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","onInputFocus","focused","onInputBlur","onChange","ChangeDetectorRef","__decorate","Input","Output","ViewChild","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","RadioButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"0wBAIaA,EAA4B,CACrCC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,GAwBXD,EAAA,WAsCI,SAAAA,EAAoBE,GAAAC,KAAAD,GAAAA,EAhBVC,KAAAC,QAA6B,IAAIC,EAAAA,aAEjCF,KAAAG,QAA6B,IAAID,EAAAA,aAEjCF,KAAAI,OAA4B,IAAIF,EAAAA,aAInCF,KAAAK,cAA0B,aAE1BL,KAAAM,eAA2B,aAuEtC,OA/DIT,EAAAU,UAAAC,YAAA,SAAYC,EAAOC,EAAaC,GAC5BF,EAAMG,iBAEFZ,KAAKa,WAITb,KAAKc,OAAOL,GAERE,GACAD,EAAYC,UAIpBd,EAAAU,UAAAO,OAAA,SAAOL,GACET,KAAKa,WACNb,KAAKe,eAAeC,cAAcC,SAAU,EAC5CjB,KAAKiB,SAAU,EACfjB,KAAKK,cAAcL,KAAKkB,OACxBlB,KAAKC,QAAQkB,KAAKV,KAI1BZ,EAAAU,UAAAa,WAAA,SAAWF,GACPlB,KAAKiB,QAAWC,GAASlB,KAAKkB,MAE1BlB,KAAKe,gBAAkBf,KAAKe,eAAeC,gBAC3ChB,KAAKe,eAAeC,cAAcC,QAAUjB,KAAKiB,SAGrDjB,KAAKD,GAAGsB,gBAGZxB,EAAAU,UAAAe,iBAAA,SAAiBC,GACbvB,KAAKK,cAAgBkB,GAGzB1B,EAAAU,UAAAiB,kBAAA,SAAkBD,GACdvB,KAAKM,eAAiBiB,GAG1B1B,EAAAU,UAAAkB,iBAAA,SAAiBC,GACb1B,KAAKa,SAAWa,GAGpB7B,EAAAU,UAAAoB,aAAA,SAAalB,GACTT,KAAK4B,SAAU,EACf5B,KAAKG,QAAQgB,KAAKV,IAGtBZ,EAAAU,UAAAsB,YAAA,SAAYpB,GACRT,KAAK4B,SAAU,EACf5B,KAAKM,iBACLN,KAAKI,OAAOe,KAAKV,IAGrBZ,EAAAU,UAAAuB,SAAA,SAASrB,GACLT,KAAKc,OAAOL,IAGhBZ,EAAAU,UAAAI,MAAA,WACIX,KAAKe,eAAeC,cAAcL,kDA/DdoB,EAAAA,qBApCfC,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,uCAEQD,EAAA,CAARC,EAAAA,8CAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,+CAESD,EAAA,CAATE,EAAAA,wCAESF,EAAA,CAATE,EAAAA,wCAESF,EAAA,CAATE,EAAAA,uCAEgBF,EAAA,CAAhBG,EAAAA,UAAU,4CA5BFtC,EAAWmC,EAAA,CArBvBI,EAAAA,UAAU,CACPC,SAAU,gBACVC,SAAU,6sCAgBVC,UAAW,CAAC/C,GACZgD,gBAAiBC,EAAAA,wBAAwBC,WAEhC7C,GAAb,gBA8GA,SAAA8C,KAAiC,OAApBA,EAAiBX,EAAA,CAL7BY,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAClD,GACVmD,aAAc,CAACnD,MAEN8C","sourcesContent":["import {NgModule,Component,Input,Output,ElementRef,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const RADIO_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RadioButton),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-radioButton',\r\n    template: `\r\n        <div [ngStyle]=\"style\" [ngClass]=\"'ui-radiobutton ui-widget'\" [class]=\"styleClass\">\r\n            <div class=\"ui-helper-hidden-accessible\">\r\n                <input #rb type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.value]=\"value\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\"\r\n                    [checked]=\"checked\" (change)=\"onChange($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\">\r\n            </div>\r\n            <div (click)=\"handleClick($event, rb, true)\" role=\"radio\" [attr.aria-checked]=\"checked\"\r\n                [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\r\n                'ui-state-active':rb.checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\r\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':rb.checked}\"></span>\r\n            </div>\r\n        </div>\r\n        <label (click)=\"select($event)\" [class]=\"labelStyleClass\"\r\n            [ngClass]=\"{'ui-radiobutton-label':true, 'ui-label-active':rb.checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\r\n            *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\r\n    `,\r\n    providers: [RADIO_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class RadioButton implements ControlValueAccessor {\r\n\r\n    @Input() value: any;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() disabled: boolean;\r\n    \r\n    @Input() label: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n    \r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() labelStyleClass: string;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ViewChild('rb') inputViewChild: ElementRef;\r\n            \r\n    public onModelChange: Function = () => {};\r\n    \r\n    public onModelTouched: Function = () => {};\r\n    \r\n    public checked: boolean;\r\n        \r\n    public focused: boolean;\r\n\r\n    constructor(private cd: ChangeDetectorRef) {}\r\n    \r\n    handleClick(event, radioButton, focus) {\r\n        event.preventDefault();\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.select(event);\r\n\r\n        if (focus) {\r\n            radioButton.focus();\r\n        }\r\n    }\r\n    \r\n    select(event) {\r\n        if (!this.disabled) {\r\n            this.inputViewChild.nativeElement.checked = true;\r\n            this.checked = true;\r\n            this.onModelChange(this.value);\r\n            this.onClick.emit(event);\r\n        }\r\n    }\r\n            \r\n    writeValue(value: any) : void {\r\n        this.checked = (value == this.value);\r\n\r\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\r\n            this.inputViewChild.nativeElement.checked = this.checked;\r\n        }\r\n        \r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    onInputFocus(event) {\r\n        this.focused = true;\r\n        this.onFocus.emit(event);\r\n    }\r\n\r\n    onInputBlur(event) {\r\n        this.focused = false;\r\n        this.onModelTouched();\r\n        this.onBlur.emit(event);\r\n    }\r\n    \r\n    onChange(event) {\r\n        this.select(event);\r\n    }\r\n\r\n    focus() {\r\n        this.inputViewChild.nativeElement.focus();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [RadioButton],\r\n    declarations: [RadioButton]\r\n})\r\nexport class RadioButtonModule { }"]}