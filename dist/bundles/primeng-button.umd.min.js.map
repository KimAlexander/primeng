{"version":3,"sources":["ng://primeng/button/button.ts"],"names":["ButtonDirective","el","this","iconPos","cornerStyleClass","prototype","ngAfterViewInit","DomHandler","addMultipleClasses","nativeElement","getStyleClass","icon","iconElement","document","createElement","setAttribute","iconPosClass","className","appendChild","labelElement","label","createTextNode","initialized","styleClass","undefined","Object","defineProperty","_label","val","findSingle","textContent","removeClass","addClass","_icon","ngOnDestroy","hasChildNodes","removeChild","lastChild","ElementRef","__decorate","Input","Directive","selector","Button","onClick","EventEmitter","onFocus","onBlur","Output","Component","template","changeDetection","ChangeDetectionStrategy","Default","ButtonModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,Input,ChangeDetectionStrategy} from '@angular/core';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pButton]'\r\n})\r\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() iconPos: 'left' | 'right' = 'left';\r\n    \r\n    @Input() cornerStyleClass: string = 'ui-corner-all';\r\n        \r\n    public _label: string;\r\n    \r\n    public _icon: string;\r\n            \r\n    public initialized: boolean;\r\n\r\n    constructor(public el: ElementRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        DomHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\r\n        if (this.icon) {\r\n            let iconElement = document.createElement(\"span\");\r\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            iconElement.className = iconPosClass  + ' ui-clickable ' + this.icon;\r\n            this.el.nativeElement.appendChild(iconElement);\r\n        }\r\n        \r\n        let labelElement = document.createElement(\"span\");\r\n        if (this.icon && !this.label) {\r\n            labelElement.setAttribute('aria-hidden', 'true');\r\n        }\r\n        labelElement.className = 'ui-button-text ui-clickable';\r\n        labelElement.appendChild(document.createTextNode(this.label||'ui-btn'));\r\n        this.el.nativeElement.appendChild(labelElement);\r\n        this.initialized = true;\r\n    }\r\n        \r\n    getStyleClass(): string {\r\n        let styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\r\n        if (this.icon) {\r\n            if (this.label != null && this.label != undefined) {\r\n                if (this.iconPos == 'left')\r\n                    styleClass = styleClass + ' ui-button-text-icon-left';\r\n                else\r\n                    styleClass = styleClass + ' ui-button-text-icon-right';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-icon-only';\r\n            }\r\n        }\r\n        else {\r\n            if (this.label) {\r\n                styleClass = styleClass + ' ui-button-text-only';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-text-empty';\r\n            }\r\n        }\r\n        \r\n        return styleClass;\r\n    }\r\n    \r\n    @Input() get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    set label(val: string) {\r\n        this._label = val;\r\n        \r\n        if (this.initialized) {\r\n            DomHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;\r\n\r\n            if (!this.icon) {\r\n                if (this._label) {\r\n                    DomHandler.removeClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    DomHandler.addClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n                else {\r\n                    DomHandler.addClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    DomHandler.removeClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    @Input() get icon(): string {\r\n        return this._icon;\r\n    }\r\n\r\n    set icon(val: string) {\r\n        this._icon = val;\r\n        \r\n        if (this.initialized) {\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            DomHandler.findSingle(this.el.nativeElement, '.ui-clickable').className =\r\n                iconPosClass + ' ui-clickable ' + this.icon;\r\n        }\r\n    }\r\n        \r\n    ngOnDestroy() {\r\n        while(this.el.nativeElement.hasChildNodes()) {\r\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\r\n        }\r\n        \r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-button',\r\n    template: `\r\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [ngStyle]=\"style\" [disabled]=\"disabled\"\r\n            [ngClass]=\"{'ui-button ui-widget ui-state-default ui-corner-all':true,\r\n                        'ui-button-icon-only': (icon && !label),\r\n                        'ui-button-text-icon-left': (icon && label && iconPos === 'left'),\r\n                        'ui-button-text-icon-right': (icon && label && iconPos === 'right'),\r\n                        'ui-button-text-only': (!icon && label),\r\n                        'ui-button-text-empty': (!icon && !label),\r\n                        'ui-state-disabled': disabled}\"\r\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\">\r\n            <ng-content></ng-content>\r\n            <span [ngClass]=\"{'ui-clickable': true,\r\n                        'ui-button-icon-left': (iconPos === 'left'), \r\n                        'ui-button-icon-right': (iconPos === 'right')}\"\r\n                        [class]=\"icon\" *ngIf=\"icon\" [attr.aria-hidden]=\"true\"></span>\r\n            <span class=\"ui-button-text ui-clickable\" [attr.aria-hidden]=\"icon && !label\">{{label||'ui-btn'}}</span>\r\n        </button>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Button {\r\n\r\n    @Input() type: string;\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Input() icon: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ButtonDirective,Button],\r\n    declarations: [ButtonDirective,Button]\r\n})\r\nexport class ButtonModule { }\r\n"]}