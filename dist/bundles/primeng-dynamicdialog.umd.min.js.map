{"version":3,"sources":["ng://primeng/dynamicdialog/dynamicdialogcontent.ts","ng://primeng/dynamicdialog/dynamicdialog-config.ts","ng://primeng/dynamicdialog/dynamicdialog-ref.ts","ng://primeng/dynamicdialog/dynamicdialog.ts","ng://primeng/dynamicdialog/dynamicdialog-injector.ts","ng://primeng/dynamicdialog/dialogservice.ts"],"names":["DynamicDialogContent","viewContainerRef","this","ViewContainerRef","__decorate","Directive","selector","DynamicDialogRef","_onClose","Subject","onClose","asObservable","_onDestroy","onDestroy","prototype","close","result","next","destroy","showAnimation","animation","style","transform","opacity","animate","hideAnimation","DynamicDialogComponent","componentFactoryResolver","cd","renderer","config","dialogRef","zone","visible","transformOptions","ngAfterViewInit","loadChildComponent","childComponentType","detectChanges","componentType","componentFactory","resolveComponentFactory","insertionPoint","clear","componentRef","createComponent","moveOnTop","autoZIndex","zIndex","baseZIndex","DomHandler","zindex","container","String","maskViewChild","nativeElement","onAnimationStart","event","toState","element","wrapper","parentElement","bindGlobalListeners","modal","enableModality","focus","onContainerDestroy","onAnimationEnd","unbindGlobalListeners","disableModality","_this","closable","dismissableMask","maskClickListener","listen","isSameNode","target","contains","addClass","document","body","unbindMaskClickListener","removeClass","destroyed","onKeydown","which","preventDefault","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","focusable","findSingle","runOutsideAngular","setTimeout","bindDocumentKeydownListener","closeOnEscape","bindDocumentEscapeListener","unbindDocumentKeydownListener","unbindDocumentEscapeListener","documentKeydownListener","bind","window","addEventListener","removeEventListener","documentEscapeListener","parseInt","ngOnDestroy","ComponentFactoryResolver","ChangeDetectorRef","Renderer2","DynamicDialogConfig","NgZone","ViewChild","__decorate$1","Component","template","animations","trigger","transition","useAnimation","changeDetection","ChangeDetectionStrategy","Default","DynamicDialogModule","NgModule","imports","CommonModule","declarations","entryComponents","DynamicDialogInjector","_parentInjector","_additionalTokens","get","token","notFoundValue","flags","value","DialogService","appRef","injector","open","appendDialogComponentToBody","dialogComponentRef","instance","map","WeakMap","set","sub","subscribe","destroySub","removeDialogComponentFromBody","unsubscribe","create","attachView","hostView","domElem","rootNodes","appendChild","detachView","ApplicationRef","Injector","__decorate$2","Injectable"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pDynamicDialogContent]'\r\n})\r\nexport class DynamicDialogContent {\r\n  \r\n\tconstructor(public viewContainerRef: ViewContainerRef) {}\r\n\r\n}\r\n","export class DynamicDialogConfig {\r\n\tdata?: any;\r\n\theader?: string;\r\n\tfooter?: string;\r\n\twidth?: string;\r\n\theight?: string;\r\n\tcloseOnEscape?: boolean;\r\n\tbaseZIndex?: number;\r\n\tautoZIndex?: boolean;\r\n\tdismissableMask?: boolean;\r\n\trtl?: boolean;\r\n\tstyle?: any;\r\n\tcontentStyle?: any;\r\n\tstyleClass?: string;\r\n\ttransitionOptions?: string;\r\n\tclosable?: boolean;\r\n\tshowHeader?: boolean;\r\n\tmodal?: boolean;\r\n}\r\n","import { Observable, Subject } from 'rxjs';\r\n\r\nexport class DynamicDialogRef {\r\n\tconstructor() { }\r\n\r\n\tclose(result?: any) {\r\n\t\tthis._onClose.next(result);\r\n    }\r\n    \r\n    destroy() {\r\n\t\tthis._onDestroy.next();\r\n\t}\r\n\r\n\tprivate readonly _onClose = new Subject<any>();\r\n    onClose: Observable<any> = this._onClose.asObservable();\r\n\r\n    private readonly _onDestroy = new Subject<any>();\r\n\tonDestroy: Observable<any> = this._onDestroy.asObservable();\r\n}\r\n","import { Component, NgModule, Type, ComponentFactoryResolver, ViewChild, OnDestroy, ComponentRef, AfterViewInit, ChangeDetectorRef, Renderer2, NgZone, ElementRef, ChangeDetectionStrategy, ViewRef } from '@angular/core';\r\nimport { trigger,style,transition,animate,AnimationEvent, animation, useAnimation } from '@angular/animations';\r\nimport { DynamicDialogContent } from './dynamicdialogcontent';\r\nimport { DynamicDialogConfig } from './dynamicdialog-config';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { DynamicDialogRef } from './dynamicdialog-ref';\r\n\r\nconst showAnimation = animation([\r\n    style({ transform: '{{transform}}', opacity: 0 }),\r\n    animate('{{transition}}', style({ transform: 'none', opacity: 1 }))\r\n]);\r\n\r\nconst hideAnimation = animation([\r\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\r\n]);\r\n\r\n@Component({\r\n\tselector: 'p-dynamicDialog',\r\n\ttemplate: `\r\n        <div #mask [ngClass]=\"{'ui-dialog-mask ui-dialog-visible':true, 'ui-widget-overlay ui-dialog-mask-scrollblocker': config.modal !== false}\">\r\n            <div [ngClass]=\"{'ui-dialog ui-dynamicdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true, 'ui-dialog-rtl': config.rtl}\" [ngStyle]=\"config.style\" [class]=\"config.styleClass\"\r\n                [@animation]=\"{value: 'visible', params: {transform: transformOptions, transition: config.transitionOptions || '150ms cubic-bezier(0, 0, 0.2, 1)'}}\"\r\n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" role=\"dialog\" *ngIf=\"visible\"\r\n                [style.width]=\"config.width\" [style.height]=\"config.height\">\r\n                <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\" *ngIf=\"config.showHeader === false ? false: true\">\r\n                    <span class=\"ui-dialog-title\">{{config.header}}</span>\r\n                    <div class=\"ui-dialog-titlebar-icons\">\r\n                        <a [ngClass]=\"'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all'\" tabindex=\"0\" role=\"button\" (click)=\"close()\" (keydown.enter)=\"close()\" *ngIf=\"config.closable !== false\">\r\n                            <span class=\"pi pi-times\"></span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div class=\"ui-dialog-content ui-widget-content\" [ngStyle]=\"config.contentStyle\">\r\n                    <ng-template pDynamicDialogContent></ng-template>\r\n                </div>\r\n                <div class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"config.footer\">\r\n                    {{config.footer}}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\t`,\r\n\tanimations: [\r\n        trigger('animation', [\r\n            transition('void => visible', [\r\n                useAnimation(showAnimation)\r\n            ]),\r\n            transition('visible => void', [\r\n                useAnimation(hideAnimation)\r\n            ])\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class DynamicDialogComponent implements AfterViewInit, OnDestroy {\r\n\r\n\tvisible: boolean = true;\r\n\r\n\tcomponentRef: ComponentRef<any>;\r\n\r\n\tmask: HTMLDivElement;\r\n\r\n\t@ViewChild(DynamicDialogContent) insertionPoint: DynamicDialogContent;\r\n\r\n\t@ViewChild('mask') maskViewChild: ElementRef;\r\n\r\n\tchildComponentType: Type<any>;\r\n\r\n    container: HTMLDivElement;\r\n\r\n    wrapper: HTMLElement;\r\n\r\n    documentKeydownListener: any;\r\n\r\n    documentEscapeListener: Function;\r\n\r\n    maskClickListener: Function;\r\n\r\n    transformOptions: string = \"scale(0.7)\";\r\n\r\n\tconstructor(private componentFactoryResolver: ComponentFactoryResolver, private cd: ChangeDetectorRef, public renderer: Renderer2,\r\n\t\t\tpublic config: DynamicDialogConfig, private dialogRef: DynamicDialogRef, public zone: NgZone) { }\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis.loadChildComponent(this.childComponentType);\r\n\t\tthis.cd.detectChanges();\r\n\t}\r\n\r\n\tloadChildComponent(componentType: Type<any>) {\r\n\t\tlet componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\r\n\r\n\t\tlet viewContainerRef = this.insertionPoint.viewContainerRef;\r\n\t\tviewContainerRef.clear();\r\n\r\n\t\tthis.componentRef = viewContainerRef.createComponent(componentFactory);\r\n\t}\r\n\r\n\tmoveOnTop() {\r\n        if (this.config.autoZIndex !== false) {\r\n\t\t\tconst zIndex = (this.config.baseZIndex||0) + (++DomHandler.zindex);\r\n\t\t\tthis.container.style.zIndex = String(zIndex);\r\n\t\t\tthis.maskViewChild.nativeElement.style.zIndex = String(zIndex - 1);\r\n\t\t}\r\n    }\r\n\r\n\tonAnimationStart(event: AnimationEvent) {\r\n\t\tswitch(event.toState) {\r\n\t\t\tcase 'visible':\r\n                this.container = event.element;\r\n                this.wrapper = this.container.parentElement;\r\n\t\t\t\tthis.moveOnTop();\r\n                this.bindGlobalListeners();\r\n\r\n                if (this.config.modal !== false) {\r\n                    this.enableModality();\r\n                }\r\n                this.focus();\r\n\t\t\tbreak;\r\n\r\n\t\t\tcase 'void':\r\n\t\t\t\tthis.onContainerDestroy();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tonAnimationEnd(event: AnimationEvent) {\r\n\t\tif (event.toState === 'void') {\r\n\t\t\tthis.dialogRef.destroy();\r\n\t\t}\r\n\t}\r\n\r\n\tonContainerDestroy() {\r\n\t\tthis.unbindGlobalListeners();\r\n        \r\n        if (this.config.modal !== false) {\r\n            this.disableModality();\r\n        }\r\n        this.container = null;\r\n\t}\r\n\r\n\tclose() {\r\n        this.visible = false;\r\n\t}\r\n\r\n    enableModality() {\r\n        if (this.config.closable !== false && this.config.dismissableMask !== false) {\r\n            this.maskClickListener = this.renderer.listen(this.wrapper, 'click', (event: any) => {\r\n                if (this.container && !this.container.isSameNode(event.target) && !this.container.contains(event.target)) {\r\n                    this.close();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this.config.modal !== false) {\r\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\r\n        }\r\n    }\r\n\r\n    disableModality() {\r\n        if (this.wrapper) {\r\n            if (this.config.dismissableMask) {\r\n                this.unbindMaskClickListener();\r\n            }\r\n\r\n            if (this.config.modal !== false) {\r\n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\r\n            }\r\n\r\n            if (!(this.cd as ViewRef).destroyed) {\r\n                this.cd.detectChanges();\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent) {\r\n        if (event.which === 9) {\r\n            event.preventDefault();\r\n\r\n            let focusableElements = DomHandler.getFocusableElements(this.container);\r\n\r\n            if (focusableElements && focusableElements.length > 0) {\r\n                if (!document.activeElement) {\r\n                    focusableElements[0].focus();\r\n                }\r\n                else {\r\n                    let focusedIndex = focusableElements.indexOf(document.activeElement);\r\n\r\n                    if (event.shiftKey) {\r\n                        if (focusedIndex == -1 || focusedIndex === 0)\r\n                            focusableElements[focusableElements.length - 1].focus();\r\n                        else\r\n                            focusableElements[focusedIndex - 1].focus();\r\n                    }\r\n                    else {\r\n                        if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\r\n                            focusableElements[0].focus();\r\n                        else\r\n                            focusableElements[focusedIndex + 1].focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    focus() {\r\n        let focusable = DomHandler.findSingle(this.container, 'a');\r\n        if (focusable) {\r\n            this.zone.runOutsideAngular(() => {\r\n                setTimeout(() => focusable.focus(), 5);\r\n            });\r\n        }\r\n    }\r\n\r\n\tbindGlobalListeners() {\r\n        this.bindDocumentKeydownListener();\r\n\r\n        if (this.config.closeOnEscape !== false && this.config.closable !== false) {\r\n            this.bindDocumentEscapeListener();\r\n        }\r\n    }\r\n\r\n    unbindGlobalListeners() {\r\n        this.unbindDocumentKeydownListener();\r\n        this.unbindDocumentEscapeListener();\r\n    }\r\n\r\n    bindDocumentKeydownListener() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.documentKeydownListener = this.onKeydown.bind(this);\r\n            window.document.addEventListener('keydown', this.documentKeydownListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentKeydownListener() {\r\n        if (this.documentKeydownListener) {\r\n            window.document.removeEventListener('keydown', this.documentKeydownListener);\r\n            this.documentKeydownListener = null;\r\n        }\r\n    }\r\n\r\n\tbindDocumentEscapeListener() {\r\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\r\n            if (event.which == 27) {\r\n                if (parseInt(this.container.style.zIndex) == (DomHandler.zindex + (this.config.baseZIndex ? this.config.baseZIndex : 0))) {\r\n\t\t\t\t\tthis.close();\r\n\t\t\t\t}\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindDocumentEscapeListener() {\r\n        if (this.documentEscapeListener) {\r\n            this.documentEscapeListener();\r\n            this.documentEscapeListener = null;\r\n        }\r\n    }\r\n\r\n    unbindMaskClickListener() {\r\n        if (this.maskClickListener) {\r\n            this.maskClickListener();\r\n            this.maskClickListener = null;\r\n        }\r\n    }\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.onContainerDestroy();\r\n\r\n\t\tif (this.componentRef) {\r\n\t\t\tthis.componentRef.destroy();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [CommonModule],\r\n\tdeclarations: [DynamicDialogComponent, DynamicDialogContent],\r\n\tentryComponents: [DynamicDialogComponent]\r\n})\r\nexport class DynamicDialogModule { }\r\n","import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DynamicDialogInjector implements Injector {\r\n\t\r\n\tconstructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) { }\r\n\r\n\tget<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\r\n\tget(token: any, notFoundValue?: any);\r\n\tget(token: any, notFoundValue?: any, flags?: any) {\r\n\t\tconst value = this._additionalTokens.get(token);\r\n\r\n\t\tif (value) return value;\r\n\r\n\t\treturn this._parentInjector.get<any>(token, notFoundValue);\r\n\t}\r\n}\r\n","import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector, Type, EmbeddedViewRef, ComponentRef } from '@angular/core';\r\nimport { DynamicDialogComponent } from './dynamicdialog';\r\nimport { DynamicDialogInjector } from './dynamicdialog-injector';\r\nimport { DynamicDialogConfig } from './dynamicdialog-config';\r\nimport { DynamicDialogRef } from './dynamicdialog-ref';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n    \r\n    dialogComponentRef: ComponentRef<DynamicDialogComponent>;\r\n\r\n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private appRef: ApplicationRef, private injector: Injector) { }\r\n\r\n    public open(componentType: Type<any>, config: DynamicDialogConfig) {\r\n        const dialogRef = this.appendDialogComponentToBody(config);\r\n\r\n        this.dialogComponentRef.instance.childComponentType = componentType;\r\n\r\n        return dialogRef;\r\n    }\r\n\r\n    private appendDialogComponentToBody(config: DynamicDialogConfig) {\r\n        const map = new WeakMap();\r\n        map.set(DynamicDialogConfig, config);\r\n\r\n        const dialogRef = new DynamicDialogRef();\r\n        map.set(DynamicDialogRef, dialogRef);\r\n\r\n        const sub = dialogRef.onClose.subscribe(() => {\r\n            this.dialogComponentRef.instance.close();\r\n        });\r\n\r\n        const destroySub = dialogRef.onDestroy.subscribe(() => {\r\n            this.removeDialogComponentFromBody();\r\n            destroySub.unsubscribe();\r\n            sub.unsubscribe();\r\n        });\r\n\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(DynamicDialogComponent);\r\n        const componentRef = componentFactory.create(new DynamicDialogInjector(this.injector, map));\r\n\r\n        this.appRef.attachView(componentRef.hostView);\r\n\r\n        const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n        document.body.appendChild(domElem);\r\n\r\n        this.dialogComponentRef = componentRef;\r\n\r\n        return dialogRef;\r\n    }\r\n\r\n    private removeDialogComponentFromBody() {\r\n        this.appRef.detachView(this.dialogComponentRef.hostView);\r\n        this.dialogComponentRef.destroy();\r\n    }\r\n}\r\n"]}