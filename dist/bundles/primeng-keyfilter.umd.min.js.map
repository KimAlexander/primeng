{"version":3,"sources":["ng://primeng/keyfilter/keyfilter.ts"],"names":["KEYFILTER_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","KeyFilter","multi","DEFAULT_MASKS","pint","int","pnum","money","num","hex","email","alpha","alphanum","KEYS","SAFARI_KEYS","63234","63235","63232","63233","63276","63277","63272","63273","63275","el","this","ngModelChange","EventEmitter","isAndroid","DomHandler","Object","defineProperty","prototype","_pattern","regex","isNavKeyPress","e","k","keyCode","getBrowser","safari","isSpecialKey","charCode","opera","shiftKey","getKey","getCharCode","which","findDelta","value","prevValue","delta","i","length","substr","isValidChar","c","test","isValidString","str","onInput","pValidateOnly","val","nativeElement","lastVal","lastValue","inserted","removed","emit","onKeyPress","browser","mozilla","ctrlKey","altKey","cc","String","fromCharCode","preventDefault","onPaste","clipboardData","window","getData","pastedText","_b","__values","toString","_c","next","done","char","validate","validatePattern","ElementRef","__decorate","Input","Output","HostListener","Directive","selector","providers","KeyFilterModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Directive, ElementRef, HostListener, Input, forwardRef, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nexport const KEYFILTER_VALIDATOR: any = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => KeyFilter),\r\n    multi: true\r\n};\r\n\r\nconst DEFAULT_MASKS = {\r\n    pint: /[\\d]/,\r\n    'int': /[\\d\\-]/,\r\n    pnum: /[\\d\\.]/,\r\n    money: /[\\d\\.\\s,]/,\r\n    num: /[\\d\\-\\.]/,\r\n    hex: /[0-9a-f]/i,\r\n    email: /[a-z0-9_\\.\\-@]/i,\r\n    alpha: /[a-z_]/i,\r\n    alphanum: /[a-z0-9_]/i\r\n};\r\n\r\nconst KEYS = {\r\n    TAB: 9,\r\n    RETURN: 13,\r\n    ESC: 27,\r\n    BACKSPACE: 8,\r\n    DELETE: 46\r\n};\r\n\r\nconst SAFARI_KEYS = {\r\n    63234: 37, // left\r\n    63235: 39, // right\r\n    63232: 38, // up\r\n    63233: 40, // down\r\n    63276: 33, // page up\r\n    63277: 34, // page down\r\n    63272: 46, // delete\r\n    63273: 36, // home\r\n    63275: 35  // end\r\n};\r\n\r\n@Directive({\r\n    selector: '[pKeyFilter]',\r\n    providers: [KEYFILTER_VALIDATOR]\r\n})\r\nexport class KeyFilter implements Validator {\r\n\r\n    @Input() pValidateOnly: boolean;\r\n\r\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    regex: RegExp;\r\n\r\n    _pattern: any;\r\n\r\n    isAndroid: boolean;\r\n\r\n    lastValue: any;\r\n\r\n    constructor(public el: ElementRef) {\r\n        this.isAndroid = DomHandler.isAndroid();\r\n    }\r\n\r\n    get pattern(): any {\r\n        return this._pattern;\r\n    }\r\n\r\n    @Input('pKeyFilter') set pattern(_pattern: any) {\r\n        this._pattern = _pattern;\r\n        this.regex = DEFAULT_MASKS[this._pattern] || this._pattern;\r\n    }\r\n\r\n    isNavKeyPress(e: KeyboardEvent) {\r\n        let k = e.keyCode;\r\n        k = DomHandler.getBrowser().safari ? (SAFARI_KEYS[k] || k) : k;\r\n\r\n        return (k >= 33 && k <= 40) || k == KEYS.RETURN || k == KEYS.TAB || k == KEYS.ESC;\r\n    };\r\n\r\n    isSpecialKey(e: KeyboardEvent) {\r\n        let k = e.keyCode || e.charCode;\r\n\r\n        return k == 9 || k == 13 || k == 27 || k == 16 || k == 17 ||(k >= 18 && k <= 20) ||\r\n            (DomHandler.getBrowser().opera && !e.shiftKey && (k == 8 || (k >= 33 && k <= 35) || (k >= 36 && k <= 39) || (k >= 44 && k <= 45)));\r\n    }\r\n\r\n\r\n    getKey(e: KeyboardEvent) {\r\n        let k = e.keyCode || e.charCode;\r\n        return DomHandler.getBrowser().safari ? (SAFARI_KEYS[k] || k) : k;\r\n    }\r\n\r\n    getCharCode(e: KeyboardEvent) {\r\n        return e.charCode || e.keyCode || e.which;\r\n    }\r\n\r\n    findDelta(value: string, prevValue: string) {\r\n        let delta = '';\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            let str = value.substr(0, i) + value.substr(i + value.length - prevValue.length);\r\n\r\n            if (str === prevValue)\r\n                delta = value.substr(i, value.length - prevValue.length);\r\n        }\r\n\r\n        return delta;\r\n    }\r\n\r\n    isValidChar(c: string) {\r\n        return this.regex.test(c);\r\n    }\r\n\r\n    isValidString(str: string) {\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (!this.isValidChar(str.substr(i, 1))) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    @HostListener('input', ['$event'])\r\n    onInput(e: KeyboardEvent) {\r\n        if (this.isAndroid && !this.pValidateOnly) {\r\n            let val = this.el.nativeElement.value;\r\n            let lastVal = this.lastValue || '';\r\n\r\n            let inserted = this.findDelta(val, lastVal);\r\n            let removed = this.findDelta(lastVal, val);\r\n            let pasted = inserted.length > 1 || (!inserted && !removed);\r\n\r\n            if (pasted) {\r\n                if (!this.isValidString(val)) {\r\n                    this.el.nativeElement.value = lastVal;\r\n                    this.ngModelChange.emit(lastVal);\r\n                }\r\n            }\r\n            else if (!removed) {\r\n                if (!this.isValidChar(inserted)) {\r\n                    this.el.nativeElement.value = lastVal;\r\n                    this.ngModelChange.emit(lastVal);\r\n                }\r\n            }\r\n\r\n            val = this.el.nativeElement.value;\r\n            if (this.isValidString(val)) {\r\n                this.lastValue = val;\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('keypress', ['$event'])\r\n    onKeyPress(e: KeyboardEvent) {\r\n        if (this.isAndroid || this.pValidateOnly) {\r\n            return;\r\n        }\r\n\r\n        let browser = DomHandler.getBrowser();\r\n        let k = this.getKey(e);\r\n\r\n        if (browser.mozilla && (e.ctrlKey || e.altKey)) {\r\n            return;\r\n        }\r\n        else if (k == 17 || k == 18) {\r\n            return;\r\n        }\r\n\r\n        let c = this.getCharCode(e);\r\n        let cc = String.fromCharCode(c);\r\n        let ok = true;\r\n\r\n        if (!browser.mozilla && (this.isSpecialKey(e) || !cc)) {\r\n            return;\r\n        }\r\n\r\n        ok = this.regex.test(cc);\r\n\r\n        if (!ok) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('paste', ['$event'])\r\n    onPaste(e) {\r\n        const clipboardData = e.clipboardData || (<any>window).clipboardData.getData('text');\r\n        if (clipboardData) {\r\n            const pastedText = clipboardData.getData('text');\r\n            for (let char of pastedText.toString()) {\r\n                if (!this.regex.test(char)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    validate(c: AbstractControl): { [key: string]: any } {\r\n        if (this.pValidateOnly) {\r\n            let value = this.el.nativeElement.value;\r\n            if (value && !this.regex.test(value)) {\r\n                return {\r\n                    validatePattern: false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [KeyFilter],\r\n    declarations: [KeyFilter]\r\n})\r\nexport class KeyFilterModule { }\r\n"]}