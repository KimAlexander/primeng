{"version":3,"sources":["ng://primeng/sidebar/sidebar.ts"],"names":["Sidebar","el","renderer","this","position","blockScroll","autoZIndex","baseZIndex","modal","dismissible","showCloseIcon","closeOnEscape","onShow","EventEmitter","onHide","visibleChange","prototype","ngAfterViewInit","initialized","appendTo","document","body","appendChild","containerViewChild","nativeElement","DomHandler","visible","show","Object","defineProperty","_visible","val","preventVisibleChangePropagation","hide","ngAfterViewChecked","executePostDisplayActions","emit","style","zIndex","String","zindex","enableModality","disableModality","close","event","preventDefault","_this","mask","createElement","parseInt","addMultipleClasses","maskClickListener","listen","addClass","unbindMaskClickListener","removeChild","removeClass","onAnimationStart","toState","bindDocumentEscapeListener","unbindGlobalListeners","documentEscapeListener","which","unbindDocumentEscapeListener","ngOnDestroy","ElementRef","Renderer2","__decorate","Input","ViewChild","Output","Component","selector","template","animations","trigger","state","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","Default","SidebarModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ViewChild,ElementRef,Renderer2,ChangeDetectionStrategy} from '@angular/core';\r\nimport {trigger, state, style, transition, animate} from '@angular/animations';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from 'primeng/dom';\r\n\r\n@Component({\r\n    selector: 'p-sidebar',\r\n    template: `\r\n        <div #container [ngClass]=\"{'ui-sidebar ui-widget ui-widget-content ui-shadow':true, 'ui-sidebar-active': visible, \r\n            'ui-sidebar-left': (position === 'left'), 'ui-sidebar-right': (position === 'right'),\r\n            'ui-sidebar-top': (position === 'top'), 'ui-sidebar-bottom': (position === 'bottom'), \r\n            'ui-sidebar-full': fullScreen}\"\r\n            [@panelState]=\"visible ? 'visible' : 'hidden'\" (@panelState.start)=\"onAnimationStart($event)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"complementary\" [attr.aria-modal]=\"modal\">\r\n            <a [ngClass]=\"{'ui-sidebar-close ui-corner-all':true}\" *ngIf=\"showCloseIcon\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\" [attr.aria-label]=\"ariaCloseLabel\">\r\n                <span class=\"pi pi-times\"></span>\r\n            </a>\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelState', [\r\n            state('hidden', style({\r\n                opacity: 0\r\n            })),\r\n            state('visible', style({\r\n                opacity: 1\r\n            })),\r\n            transition('visible => hidden', animate('300ms ease-in')),\r\n            transition('hidden => visible', animate('300ms ease-out'))\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Sidebar implements AfterViewInit, AfterViewChecked, OnDestroy {\r\n\r\n    @Input() position: string = 'left';\r\n\r\n    @Input() fullScreen: boolean;\r\n\r\n    @Input() appendTo: string;\r\n\r\n    @Input() blockScroll: boolean = false;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() ariaCloseLabel: string;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @Input() modal: boolean = true;\r\n\r\n    @Input() dismissible: boolean = true;\r\n\r\n    @Input() showCloseIcon: boolean = true;\r\n\r\n    @Input() closeOnEscape: boolean = true;\r\n\r\n    @ViewChild('container') containerViewChild: ElementRef;\r\n\r\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() visibleChange:EventEmitter<any> = new EventEmitter();\r\n\r\n    initialized: boolean;\r\n\r\n    _visible: boolean;\r\n\r\n    preventVisibleChangePropagation: boolean;\r\n\r\n    mask: HTMLDivElement;\r\n\r\n    maskClickListener: Function;\r\n\r\n    documentEscapeListener: Function;\r\n\r\n    executePostDisplayActions: boolean;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.initialized = true;\r\n\r\n        if (this.appendTo) {\r\n            if (this.appendTo === 'body')\r\n                document.body.appendChild(this.containerViewChild.nativeElement);\r\n            else\r\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\r\n        }\r\n\r\n        if (this.visible) {\r\n            this.show();\r\n        }\r\n    }\r\n\r\n    @Input() get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(val:boolean) {\r\n        this._visible = val;\r\n\r\n        if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\r\n            if (this._visible)\r\n                this.show();\r\n            else {\r\n                if (this.preventVisibleChangePropagation)\r\n                    this.preventVisibleChangePropagation = false;\r\n                else\r\n                    this.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.executePostDisplayActions) {\r\n            this.onShow.emit({});\r\n            this.executePostDisplayActions = false;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.executePostDisplayActions = true;\r\n        if (this.autoZIndex) {\r\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\r\n        }\r\n\r\n        if (this.modal) {\r\n            this.enableModality();\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.onHide.emit({});\r\n\r\n        if (this.modal) {\r\n            this.disableModality();\r\n        }\r\n    }\r\n\r\n    close(event: Event) {\r\n        this.preventVisibleChangePropagation = true;\r\n        this.hide();\r\n        this.visibleChange.emit(false);\r\n        event.preventDefault();\r\n    }\r\n\r\n    enableModality() {\r\n        if (!this.mask) {\r\n            this.mask = document.createElement('div');\r\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\r\n            DomHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-sidebar-mask');\r\n            \r\n            if (this.dismissible){\r\n                this.maskClickListener = this.renderer.listen(this.mask, 'click', (event: any) => {\r\n                    if (this.dismissible) {\r\n                        this.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            document.body.appendChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.addClass(document.body, 'ui-overflow-hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    disableModality() {\r\n        if (this.mask) {\r\n            this.unbindMaskClickListener();\r\n            document.body.removeChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\r\n            }\r\n            this.mask = null;\r\n        }\r\n    }\r\n\r\n    onAnimationStart(event){\r\n        switch(event.toState) {\r\n            case 'visible':\r\n                if (this.closeOnEscape) {\r\n                    this.bindDocumentEscapeListener();\r\n                }\r\n            break;\r\n            \r\n            case 'hidden':\r\n                this.unbindGlobalListeners();\r\n            break;\r\n        }\r\n    }\r\n\r\n    bindDocumentEscapeListener() {\r\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\r\n            if (event.which == 27) {\r\n                if (parseInt(this.containerViewChild.nativeElement.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\r\n                    this.close(event);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindDocumentEscapeListener() {\r\n        if (this.documentEscapeListener) {\r\n            this.documentEscapeListener();\r\n            this.documentEscapeListener = null;\r\n        }\r\n    }\r\n\r\n    unbindMaskClickListener() {\r\n        if (this.maskClickListener) {\r\n            this.maskClickListener();\r\n            this.maskClickListener = null;\r\n        }\r\n    }\r\n\r\n    unbindGlobalListeners() {\r\n        this.unbindMaskClickListener();\r\n        this.unbindDocumentEscapeListener();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.initialized = false;\r\n\r\n        if (this.visible) {\r\n            this.hide();\r\n        }\r\n\r\n        if (this.appendTo) {\r\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\r\n        }\r\n\r\n\t\tthis.unbindGlobalListeners();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Sidebar],\r\n    declarations: [Sidebar]\r\n})\r\nexport class SidebarModule { }\r\n"]}