{"version":3,"sources":["ng://primeng/slider/slider.ts"],"names":["SLIDER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Slider","multi","el","renderer","ngZone","cd","this","min","max","orientation","tabindex","onChange","EventEmitter","onSlideEnd","handleValues","onModelChange","onModelTouched","handleIndex","prototype","onMouseDown","event","index","disabled","dragging","updateDomData","sliderHandleClick","bindDragListeners","target","focus","preventDefault","onTouchStart","touchobj","changedTouches","startHandleValue","handleValue","startx","parseInt","clientX","barWidth","nativeElement","children","offsetWidth","starty","clientY","barHeight","offsetHeight","onTouchMove","Math","floor","setValueFromHandle","onTouchEnd","range","emit","originalEvent","values","value","onBarClick","handleChange","onHandleKeydown","which","spin","dir","step","updateValue","updateHandleValue","calculateHandleValue","_this","runOutsideAngular","dragListener","listen","run","mouseupListener","unbindDragListeners","newValue","getValueFromHandle","handleStepChange","oldValue","diff","val","ceil","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","Object","defineProperty","isVertical","rect","getBoundingClientRect","initX","left","DomHandler","getWindowScrollLeft","initY","top","getWindowScrollTop","pageX","pageY","sliderHandleStart","sliderHandleEnd","getNormalizedValue","slice","sliderHandle","getDecimalsCount","toString","split","length","decimalsCount","toFixed","ngOnDestroy","ElementRef","Renderer2","NgZone","ChangeDetectorRef","__decorate","Input","Output","ViewChild","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","SliderModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule, Component, ElementRef, OnDestroy, Input, Output, EventEmitter, forwardRef, Renderer2,NgZone,ChangeDetectorRef, ViewChild, ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Slider),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-slider',\r\n    template: `\r\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'ui-slider ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled,\r\n            'ui-slider-horizontal':orientation == 'horizontal','ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}\"\r\n            (click)=\"onBarClick($event)\">\r\n            <span *ngIf=\"range && orientation == 'horizontal'\" class=\"ui-slider-range ui-widget-header ui-corner-all\" [ngStyle]=\"{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}\"></span>\r\n            <span *ngIf=\"range && orientation == 'vertical'\" class=\"ui-slider-range ui-widget-header ui-corner-all\" [ngStyle]=\"{'bottom':handleValues[0] + '%',height: (handleValues[1] - handleValues[0] + '%')}\"></span>\r\n            <span *ngIf=\"!range && orientation=='vertical'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\" [ngStyle]=\"{'height': handleValue + '%'}\"></span>\r\n            <span *ngIf=\"!range && orientation=='horizontal'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\" [ngStyle]=\"{'width': handleValue + '%'}\"></span>\r\n            <span #sliderHandle *ngIf=\"!range\" [attr.tabindex]=\"tabindex\" (keydown)=\"onHandleKeydown($event)\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" (mousedown)=\"onMouseDown($event)\" (touchstart)=\"onTouchStart($event)\" (touchmove)=\"onTouchMove($event)\" (touchend)=\"onTouchEnd($event)\"\r\n                [style.transition]=\"dragging ? 'none': null\" [ngStyle]=\"{'left': orientation == 'horizontal' ? handleValue + '%' : null,'bottom': orientation == 'vertical' ? handleValue + '%' : null}\"\r\n                [attr.aria-valuemin]=\"min\" [attr.aria-valuenow]=\"value\" [attr.aria-valuemax]=\"max\" [attr.aria-labelledby]=\"ariaLabelledBy\"></span>\r\n            <span #sliderHandleStart *ngIf=\"range\" [attr.tabindex]=\"tabindex\" (keydown)=\"onHandleKeydown($event,0)\" (mousedown)=\"onMouseDown($event,0)\" (touchstart)=\"onTouchStart($event,0)\" (touchmove)=\"onTouchMove($event,0)\" (touchend)=\"onTouchEnd($event)\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" \r\n                [ngStyle]=\"{'left': rangeStartLeft, 'bottom': rangeStartBottom}\" [ngClass]=\"{'ui-slider-handle-active':handleIndex==0}\"\r\n                [attr.aria-valuemin]=\"min\" [attr.aria-valuenow]=\"value ? value[0] : null\" [attr.aria-valuemax]=\"max\" [attr.aria-labelledby]=\"ariaLabelledBy\"></span>\r\n            <span #sliderHandleEnd *ngIf=\"range\" [attr.tabindex]=\"tabindex\" (keydown)=\"onHandleKeydown($event,1)\" (mousedown)=\"onMouseDown($event,1)\" (touchstart)=\"onTouchStart($event,1)\" (touchmove)=\"onTouchMove($event,1)\" (touchend)=\"onTouchEnd($event)\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all ui-clickable\" \r\n                [ngStyle]=\"{'left': rangeEndLeft, 'bottom': rangeEndBottom}\" [ngClass]=\"{'ui-slider-handle-active':handleIndex==1}\"\r\n                [attr.aria-valuemin]=\"min\" [attr.aria-valuenow]=\"value ? value[1] : null\" [attr.aria-valuemax]=\"max\" [attr.aria-labelledby]=\"ariaLabelledBy\"></span>\r\n        </div>\r\n    `,\r\n    providers: [SLIDER_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Slider implements OnDestroy,ControlValueAccessor {\r\n\r\n    @Input() animate: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() min: number = 0;\r\n\r\n    @Input() max: number = 100;\r\n\r\n    @Input() orientation: string = 'horizontal';\r\n\r\n    @Input() step: number;\r\n\r\n    @Input() range: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() tabindex: number = 0;\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onSlideEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ViewChild(\"sliderHandle\") sliderHandle: ElementRef;\r\n\r\n    @ViewChild(\"sliderHandleStart\") sliderHandleStart: ElementRef;\r\n\r\n    @ViewChild(\"sliderHandleEnd\") sliderHandleEnd: ElementRef;\r\n\r\n    public value: number;\r\n    \r\n    public values: number[];\r\n    \r\n    public handleValue: number;\r\n    \r\n    public handleValues: number[] = [];\r\n        \r\n    public onModelChange: Function = () => {};\r\n    \r\n    public onModelTouched: Function = () => {};\r\n    \r\n    public dragging: boolean;\r\n    \r\n    public dragListener: any;\r\n    \r\n    public mouseupListener: any;\r\n        \r\n    public initX: number;\r\n    \r\n    public initY: number;\r\n    \r\n    public barWidth: number;\r\n    \r\n    public barHeight: number;\r\n    \r\n    public sliderHandleClick: boolean;\r\n    \r\n    public handleIndex: number = 0;\r\n\r\n    public startHandleValue: any;\r\n\r\n    public startx: number;\r\n\r\n    public starty: number;\r\n    \r\n    constructor(public el: ElementRef, public renderer: Renderer2, private ngZone: NgZone, public cd: ChangeDetectorRef) {}\r\n    \r\n    onMouseDown(event, index?:number) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        \r\n        this.dragging = true;\r\n        this.updateDomData();\r\n        this.sliderHandleClick = true;\r\n        this.handleIndex = index;\r\n        this.bindDragListeners();\r\n        event.target.focus();\r\n        event.preventDefault();\r\n    }\r\n\r\n    onTouchStart(event, index?:number) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        var touchobj = event.changedTouches[0];\r\n        this.startHandleValue = (this.range) ? this.handleValues[index] : this.handleValue;\r\n        this.dragging = true;\r\n        this.handleIndex = index;\r\n\r\n        if (this.orientation === 'horizontal') {\r\n            this.startx = parseInt(touchobj.clientX, 10);\r\n            this.barWidth = this.el.nativeElement.children[0].offsetWidth;\r\n        }\r\n        else {\r\n            this.starty = parseInt(touchobj.clientY, 10);\r\n            this.barHeight = this.el.nativeElement.children[0].offsetHeight;\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    onTouchMove(event, index?:number) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        \r\n        var touchobj = event.changedTouches[0],\r\n        handleValue = 0;\r\n\r\n        if (this.orientation === 'horizontal') {\r\n            handleValue = Math.floor(((parseInt(touchobj.clientX, 10) - this.startx) * 100) / (this.barWidth)) + this.startHandleValue;\r\n        }\r\n        else {\r\n            handleValue = Math.floor(((this.starty - parseInt(touchobj.clientY, 10)) * 100) / (this.barHeight))  + this.startHandleValue;\r\n        }\r\n\r\n        this.setValueFromHandle(event, handleValue);\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    onTouchEnd(event, index?:number) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.dragging = false;\r\n        \r\n        if (this.range)\r\n            this.onSlideEnd.emit({originalEvent: event, values: this.values});\r\n        else\r\n            this.onSlideEnd.emit({originalEvent: event, value: this.value});\r\n        \r\n        event.preventDefault();\r\n    }\r\n    \r\n    onBarClick(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        \r\n        if (!this.sliderHandleClick) {\r\n            this.updateDomData();\r\n            this.handleChange(event);\r\n        }\r\n        \r\n        this.sliderHandleClick = false;\r\n    }\r\n\r\n    onHandleKeydown(event, handleIndex?:number) {\r\n        if (event.which == 38 || event.which == 39) {\r\n            this.spin(event, 1, handleIndex);\r\n        }\r\n        else if (event.which == 37 || event.which == 40) {\r\n            this.spin(event, -1, handleIndex);\r\n        }\r\n    }\r\n    \r\n    spin(event, dir: number, handleIndex?:number) {\r\n        let step = (this.step || 1) * dir;\r\n\r\n        if (this.range) {\r\n            this.handleIndex = handleIndex;\r\n            this.updateValue(this.values[this.handleIndex] + step);\r\n            this.updateHandleValue();\r\n        }\r\n        else {\r\n            this.updateValue(this.value + step);\r\n            this.updateHandleValue();\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: Event) {\r\n        let handleValue = this.calculateHandleValue(event);\r\n        this.setValueFromHandle(event, handleValue);\r\n    }\r\n    \r\n    bindDragListeners() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (!this.dragListener) {\r\n                this.dragListener = this.renderer.listen('document', 'mousemove', (event) => {\r\n                    if (this.dragging) {\r\n                        this.ngZone.run(() => {\r\n                            this.handleChange(event);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!this.mouseupListener) {\r\n                this.mouseupListener = this.renderer.listen('document', 'mouseup', (event) => {\r\n                    if (this.dragging) {\r\n                        this.dragging = false;\r\n                        this.ngZone.run(() => {\r\n                            if (this.range) {\r\n                                this.onSlideEnd.emit({originalEvent: event, values: this.values});\r\n                            } else {\r\n                                this.onSlideEnd.emit({originalEvent: event, value: this.value});\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    unbindDragListeners() {\r\n        if (this.dragListener) {\r\n            this.dragListener();\r\n        }\r\n        \r\n        if (this.mouseupListener) {\r\n            this.mouseupListener();\r\n        }\r\n    }\r\n\r\n    setValueFromHandle(event: Event, handleValue: any) {\r\n        let newValue = this.getValueFromHandle(handleValue);\r\n\r\n        if (this.range) {\r\n            if (this.step) {\r\n                this.handleStepChange(newValue, this.values[this.handleIndex]);\r\n            }\r\n            else {\r\n                this.handleValues[this.handleIndex] = handleValue;          \r\n                this.updateValue(newValue, event);\r\n            }\r\n        }\r\n        else {            \r\n            if (this.step) {\r\n                this.handleStepChange(newValue, this.value);\r\n            } \r\n            else {\r\n                this.handleValue = handleValue;\r\n                this.updateValue(newValue, event);\r\n            }         \r\n        }\r\n    }\r\n    \r\n    handleStepChange(newValue: number, oldValue: number) {\r\n        let diff = (newValue - oldValue);\r\n        let val = oldValue;\r\n        \r\n        if (diff < 0) {\r\n            val = oldValue + Math.ceil(newValue / this.step - oldValue / this.step) * this.step;\r\n        }\r\n        else if (diff > 0) {\r\n            val = oldValue + Math.floor(newValue / this.step - oldValue / this.step) * this.step;\r\n        }\r\n        \r\n        this.updateValue(val);\r\n        this.updateHandleValue();\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        if (this.range)\r\n            this.values = value||[0,0];\r\n        else\r\n            this.value = value||0;\r\n        \r\n        this.updateHandleValue();\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    get rangeStartLeft() {\r\n        return this.isVertical() ? 'auto' : this.handleValues[0] + '%';\r\n    }\r\n    \r\n    get rangeStartBottom() {\r\n        return this.isVertical() ? this.handleValues[0] + '%' : 'auto';\r\n    }\r\n    \r\n    get rangeEndLeft() {\r\n        return this.isVertical() ? 'auto' : this.handleValues[1] + '%';\r\n    }\r\n    \r\n    get rangeEndBottom() {\r\n        return this.isVertical() ? this.handleValues[1] + '%' : 'auto';\r\n    }\r\n    \r\n    isVertical(): boolean {\r\n        return this.orientation === 'vertical';\r\n    }\r\n    \r\n    updateDomData(): void {\r\n        let rect = this.el.nativeElement.children[0].getBoundingClientRect();\r\n        this.initX = rect.left + DomHandler.getWindowScrollLeft();\r\n        this.initY = rect.top + DomHandler.getWindowScrollTop();\r\n        this.barWidth = this.el.nativeElement.children[0].offsetWidth;\r\n        this.barHeight = this.el.nativeElement.children[0].offsetHeight;\r\n    }\r\n    \r\n    calculateHandleValue(event): number {\r\n        if (this.orientation === 'horizontal')\r\n            return ((event.pageX - this.initX) * 100) / (this.barWidth);\r\n        else\r\n            return(((this.initY + this.barHeight) - event.pageY) * 100) / (this.barHeight);\r\n    }\r\n    \r\n    updateHandleValue(): void {\r\n        if (this.range) {\r\n            this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);\r\n            this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);\r\n        }\r\n        else {\r\n            if (this.value < this.min)\r\n                this.handleValue = 0;\r\n            else if (this.value > this.max)\r\n                this.handleValue = 100;\r\n            else\r\n                this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);\r\n        }\r\n    }\r\n    \r\n    updateValue(val: number, event?: Event): void {\r\n        if (this.range) {\r\n            let value = val;\r\n            \r\n            if (this.handleIndex == 0) {\r\n                if (value < this.min) {\r\n                    value = this.min;\r\n                    this.handleValues[0] = 0;\r\n                }\r\n                else if (value > this.values[1]) {\r\n                    value = this.values[1];\r\n                    this.handleValues[0] = this.handleValues[1];\r\n                }\r\n\r\n                this.sliderHandleStart.nativeElement.focus();\r\n            }\r\n            else {\r\n                if (value > this.max) {\r\n                    value = this.max;\r\n                    this.handleValues[1] = 100;\r\n                }\r\n                else if (value < this.values[0]) {\r\n                    value = this.values[0];\r\n                    this.handleValues[1] = this.handleValues[0];\r\n                }\r\n\r\n                this.sliderHandleEnd.nativeElement.focus();\r\n            }\r\n            \r\n            this.values[this.handleIndex] = this.getNormalizedValue(value);\r\n            this.values = this.values.slice();\r\n            this.onModelChange(this.values);\r\n            this.onChange.emit({event: event, values: this.values});\r\n        }\r\n        else {\r\n            if (val < this.min) {\r\n                val = this.min;\r\n                this.handleValue = 0;\r\n            }\r\n            else if (val > this.max) {\r\n                val = this.max;\r\n                this.handleValue = 100;\r\n            }\r\n            \r\n\t\t\tthis.value = this.getNormalizedValue(val);\r\n            \r\n            this.onModelChange(this.value);\r\n            this.onChange.emit({event: event, value: this.value});\r\n            this.sliderHandle.nativeElement.focus();\r\n        }\r\n    }\r\n            \r\n    getValueFromHandle(handleValue: number): number {\r\n        return (this.max - this.min) * (handleValue / 100) + this.min;\r\n    }\r\n\t\r\n\tgetDecimalsCount(value: number): number {\r\n\t\tif (value && Math.floor(value) !== value)\r\n\t\t\treturn value.toString().split(\".\")[1].length || 0;\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tgetNormalizedValue(val: number): number {\r\n\t\tlet decimalsCount = this.getDecimalsCount(this.step);\r\n\t\tif (decimalsCount > 0) {\r\n\t\t\treturn +val.toFixed(decimalsCount);\r\n\t\t} \r\n\t\telse {\r\n\t\t\treturn Math.floor(val);\r\n\t\t}\r\n\t}\r\n    \r\n    ngOnDestroy() {\r\n        this.unbindDragListeners();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Slider],\r\n    declarations: [Slider]\r\n})\r\nexport class SliderModule { }\r\n"]}