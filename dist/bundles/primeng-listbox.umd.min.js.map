{"version":3,"sources":["ng://primeng/listbox/listbox.ts"],"names":["LISTBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Listbox","multi","el","cd","this","checkbox","filter","filterMode","metaKeySelection","showToggleAll","onChange","EventEmitter","onClick","onDblClick","onModelChange","onModelTouched","disabledSelectedOptions","Object","defineProperty","prototype","_options","val","opts","optionLabel","ObjectUtils","generateSelectItems","_filterValue","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","template","writeValue","value","setDisabledSelectedOptions","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","onOptionClick","event","option","readonly","multiple","onOptionClickCheckbox","onOptionClickMultiple","onOptionClickSingle","emit","originalEvent","optionTouched","onOptionTouchEnd","onOptionDoubleClick","selected","isSelected","valueChanged","metaKey","ctrlKey","removeOption","__spread","equals","dataKey","_b","__values","_c","next","done","filterValue","allFilteredSelected","optionCount","getEnabledOptionCount","disabledSelectedOptionCount","length","options","count","allSelected","getFilteredOptions","opt","isItemVisible","onFilter","target","toggleAll","allChecked","i","push","preventDefault","FilterUtils","label","filterLocale","onInputFocus","focus","onInputBlur","onOptionKeyDown","currentTarget","which","nextItem","findNextItem","prevItem","findPrevItem","nextElementSibling","DomHandler","hasClass","isHidden","previousElementSibling","filteredOptions","onHeaderCheckboxFocus","headerCheckboxFocus","onHeaderCheckboxBlur","ElementRef","ChangeDetectorRef","__decorate","Input","Output","ViewChild","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","Component","selector","providers","changeDetection","ChangeDetectionStrategy","Default","ListboxModule","NgModule","imports","CommonModule","SharedModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Output, EventEmitter, AfterContentInit, ContentChildren, ContentChild, QueryList, TemplateRef,forwardRef, ChangeDetectorRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { SharedModule, PrimeTemplate, Footer, Header } from 'primeng/api';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { ObjectUtils } from 'primeng/utils';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { FilterUtils } from 'primeng/utils';\r\n\r\nexport const LISTBOX_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => Listbox),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-listbox',\r\n    template: `\r\n    <div [ngClass]=\"{'ui-listbox ui-inputtext ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled,'ui-state-focus':focus}\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n      <div class=\"ui-helper-hidden-accessible\">\r\n        <input type=\"text\" readonly=\"readonly\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\r\n      </div>\r\n      <div class=\"ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix\" *ngIf=\"headerFacet\">\r\n        <ng-content select=\"p-header\"></ng-content>\r\n      </div>\r\n      <div class=\"ui-widget-header ui-corner-all ui-listbox-header ui-helper-clearfix\" *ngIf=\"(checkbox && multiple && showToggleAll) || filter\" [ngClass]=\"{'ui-listbox-header-w-checkbox': checkbox}\">\r\n        <div class=\"ui-chkbox ui-widget\" *ngIf=\"checkbox && multiple && showToggleAll\">\r\n          <div class=\"ui-helper-hidden-accessible\">\r\n            <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"allChecked\" (focus)=\"onHeaderCheckboxFocus()\" (blur)=\"onHeaderCheckboxBlur()\" (keydown.space)=\"toggleAll($event)\">\r\n          </div>\r\n          <div #headerchkbox class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active': allChecked, 'ui-state-focus': headerCheckboxFocus}\" (click)=\"toggleAll($event)\">\r\n            <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':allChecked}\"></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"ui-listbox-filter-container\" *ngIf=\"filter\">\r\n          <input type=\"text\" [value]=\"filterValue||''\" (input)=\"onFilter($event)\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\" [disabled]=\"disabled\" [attr.placeholder]=\"filterPlaceHolder\" [attr.aria-label]=\"ariaFilterLabel\">\r\n          <span class=\"ui-listbox-filter-icon pi pi-search\"></span>\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-listbox-list-wrapper\" [ngStyle]=\"listStyle\">\r\n        <ul class=\"ui-listbox-list\" role=\"listbox\" aria-multiselectable=\"multiple\">\r\n          <li *ngFor=\"let option of options; let i = index;\" [style.display]=\"isItemVisible(option) ? 'block' : 'none'\" [attr.tabindex]=\"option.disabled ? null : '0'\"\r\n              [ngClass]=\"{'ui-listbox-item ui-corner-all':true,'ui-state-highlight':isSelected(option), 'ui-state-disabled': option.disabled}\" role=\"option\" [attr.aria-label]=\"option.label\"\r\n              [attr.aria-selected]=\"isSelected(option)\" (click)=\"onOptionClick($event,option)\" (dblclick)=\"onOptionDoubleClick($event,option)\" (touchend)=\"onOptionTouchEnd($event,option)\" (keydown)=\"onOptionKeyDown($event,option)\">\r\n            <div class=\"ui-chkbox ui-widget\" *ngIf=\"checkbox && multiple\">\r\n              <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':isSelected(option)}\">\r\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':isSelected(option)}\"></span>\r\n              </div>\r\n            </div>\r\n            <span *ngIf=\"!itemTemplate\">{{option.label}}</span>\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"ui-listbox-footer ui-widget-header ui-corner-all\" *ngIf=\"footerFacet\">\r\n        <ng-content select=\"p-footer\"></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n    providers: [LISTBOX_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Listbox implements AfterContentInit, ControlValueAccessor {\r\n\r\n    @Input() multiple: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() listStyle: any;\r\n\r\n    @Input() readonly: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() checkbox: boolean = false;\r\n\r\n    @Input() filter: boolean = false;\r\n\r\n    @Input() filterMode: string = 'contains';\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() metaKeySelection: boolean = true;\r\n\r\n    @Input() dataKey: string;\r\n\r\n    @Input() showToggleAll: boolean = true;\r\n\r\n    @Input() optionLabel: string;\r\n\r\n    @Input() ariaFilterLabel: string;\r\n\r\n    @Input() filterPlaceHolder: string;\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onDblClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('headerchkbox') headerCheckboxViewChild: ElementRef;\r\n\r\n    @ContentChild(Header) headerFacet;\r\n\r\n    @ContentChild(Footer) footerFacet;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    public itemTemplate: TemplateRef<any>;\r\n\r\n    public _filterValue: string;\r\n\r\n    public filtered: boolean;\r\n\r\n    public value: any;\r\n\r\n    public onModelChange: Function = () => { };\r\n\r\n    public onModelTouched: Function = () => { };\r\n\r\n    public optionTouched: boolean;\r\n\r\n    public focus: boolean;\r\n\r\n    public _options: any[];\r\n\r\n    public headerCheckboxFocus: boolean;\r\n\r\n    public disabledSelectedOptions: SelectItem[] = [];\r\n\r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) { }\r\n\r\n    @Input() get options(): any[] {\r\n        return this._options;\r\n    }\r\n\r\n    set options(val: any[]) {\r\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\r\n        this._options = opts;\r\n    }\r\n\r\n    @Input() get filterValue(): string {\r\n        return this._filterValue;\r\n    }\r\n\r\n    set filterValue(val: string) {\r\n        this._filterValue = val;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'item':\r\n                    this.itemTemplate = item.template;\r\n                    break;\r\n\r\n                default:\r\n                    this.itemTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        this.value = value;\r\n        this.setDisabledSelectedOptions();\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n\r\n    onOptionClick(event, option) {\r\n        if (this.disabled || option.disabled || this.readonly) {\r\n            return;\r\n        }\r\n\r\n        if (this.multiple) {\r\n            if (this.checkbox)\r\n                this.onOptionClickCheckbox(event, option);\r\n            else\r\n                this.onOptionClickMultiple(event, option);\r\n        }\r\n        else {\r\n            this.onOptionClickSingle(event, option);\r\n        }\r\n        this.onClick.emit({\r\n            originalEvent: event,\r\n            option: option,\r\n            value: this.value\r\n        });\r\n        this.optionTouched = false;\r\n    }\r\n\r\n    onOptionTouchEnd(event, option) {\r\n        if (this.disabled || option.disabled || this.readonly) {\r\n            return;\r\n        }\r\n\r\n        this.optionTouched = true;\r\n    }\r\n\r\n    onOptionDoubleClick(event: Event, option: SelectItem): any {\r\n        if (this.disabled || option.disabled || this.readonly) {\r\n            return;\r\n        }\r\n\r\n        this.onDblClick.emit({\r\n            originalEvent: event,\r\n            option: option,\r\n            value: this.value\r\n        })\r\n    }\r\n\r\n    onOptionClickSingle(event, option) {\r\n        let selected = this.isSelected(option);\r\n        let valueChanged = false;\r\n        let metaSelection = this.optionTouched ? false : this.metaKeySelection;\r\n\r\n        if (metaSelection) {\r\n            let metaKey = (event.metaKey || event.ctrlKey);\r\n\r\n            if (selected) {\r\n                if (metaKey) {\r\n                    this.value = null;\r\n                    valueChanged = true;\r\n                }\r\n            }\r\n            else {\r\n                this.value = option.value;\r\n                valueChanged = true;\r\n            }\r\n        }\r\n        else {\r\n            this.value = selected ? null : option.value;\r\n            valueChanged = true;\r\n        }\r\n\r\n        if (valueChanged) {\r\n            this.onModelChange(this.value);\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                value: this.value\r\n            });\r\n        }\r\n    }\r\n\r\n    onOptionClickMultiple(event, option) {\r\n        let selected = this.isSelected(option);\r\n        let valueChanged = false;\r\n        let metaSelection = this.optionTouched ? false : this.metaKeySelection;\r\n\r\n        if (metaSelection) {\r\n            let metaKey = (event.metaKey || event.ctrlKey);\r\n\r\n            if (selected) {\r\n                if (metaKey) {\r\n                    this.removeOption(option);\r\n                }\r\n                else {\r\n                    this.value = [option.value];\r\n                }\r\n                valueChanged = true;\r\n            }\r\n            else {\r\n                this.value = (metaKey) ? this.value || [] : [];\r\n                this.value = [...this.value, option.value];\r\n                valueChanged = true;\r\n            }\r\n        }\r\n        else {\r\n            if (selected) {\r\n                this.removeOption(option);\r\n            }\r\n            else {\r\n                this.value = [...this.value || [], option.value];\r\n            }\r\n\r\n            valueChanged = true;\r\n        }\r\n\r\n        if (valueChanged) {\r\n            this.onModelChange(this.value);\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                value: this.value\r\n            });\r\n        }\r\n    }\r\n\r\n    onOptionClickCheckbox(event, option) {\r\n        if (this.disabled || this.readonly) {\r\n            return;\r\n        }\r\n\r\n        let selected = this.isSelected(option);\r\n\r\n        if (selected) {\r\n            this.removeOption(option);\r\n        }\r\n        else {\r\n            this.value = this.value ? this.value : [];\r\n            this.value = [...this.value, option.value];\r\n        }\r\n\r\n        this.onModelChange(this.value);\r\n        this.onChange.emit({\r\n            originalEvent: event,\r\n            value: this.value\r\n        });\r\n    }\r\n\r\n    removeOption(option: any): void {\r\n        this.value = this.value.filter(val => !ObjectUtils.equals(val, option.value, this.dataKey));\r\n    }\r\n\r\n    isSelected(option: SelectItem) {\r\n        let selected = false;\r\n\r\n        if (this.multiple) {\r\n            if (this.value) {\r\n                for (let val of this.value) {\r\n                    if (ObjectUtils.equals(val, option.value, this.dataKey)) {\r\n                        selected = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selected = ObjectUtils.equals(this.value, option.value, this.dataKey);\r\n        }\r\n\r\n        return selected;\r\n    }\r\n\r\n    get allChecked(): boolean {\r\n        if (this.filterValue) {\r\n            return this.allFilteredSelected();\r\n        }\r\n        else {\r\n            let optionCount = this.getEnabledOptionCount();\r\n            let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\r\n\r\n            return this.value && this.options && (this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount);\r\n        }\r\n    }\r\n\r\n    getEnabledOptionCount(): number {\r\n        if (this.options) {\r\n            let count = 0;\r\n            for (let opt of this.options) {\r\n                if (!opt.disabled) {\r\n                    count++;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    allFilteredSelected(): boolean {\r\n        let allSelected: boolean;\r\n        let options = this.filterValue ? this.getFilteredOptions() : this.options;\r\n\r\n        if (this.value && options && options.length) Â {\r\n            allSelected = true;\r\n            for (let opt of this.options) {\r\n                if (this.isItemVisible(opt)) {\r\n                    if (!this.isSelected(opt)) {\r\n                        allSelected = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return allSelected;\r\n    }\r\n\r\n    onFilter(event) {\r\n        this._filterValue = event.target.value;\r\n    }\r\n\r\n    toggleAll(event) {\r\n        if (this.disabled || this.readonly || !this.options || this.options.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.allChecked) {\r\n            if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\r\n                let value = [];\r\n                value = [...this.disabledSelectedOptions];\r\n                this.value = value;\r\n            }\r\n            else {\r\n                this.value = [];\r\n            }\r\n        }\r\n        else {\r\n            if (this.options) {\r\n                this.value = [];\r\n                if (this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\r\n                    this.value = [...this.disabledSelectedOptions];\r\n                }\r\n\r\n                for (let i = 0; i < this.options.length; i++) {\r\n                    let opt = this.options[i];\r\n                    if (this.isItemVisible(opt) && !opt.disabled) {\r\n                        this.value.push(opt.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onModelChange(this.value);\r\n        this.onChange.emit({ originalEvent: event, value: this.value });\r\n        event.preventDefault();\r\n    }\r\n\r\n    isItemVisible(option: SelectItem): boolean {\r\n        if (this.filterValue) {\r\n            let visible;\r\n\r\n            if (this.filterMode) {\r\n                visible = FilterUtils[this.filterMode](option.label, this.filterValue, this.filterLocale);\r\n            }\r\n            else {\r\n                visible = true;\r\n            }\r\n\r\n            return visible;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onInputFocus(event) {\r\n        this.focus = true;\r\n    }\r\n\r\n    onInputBlur(event) {\r\n        this.focus = false;\r\n    }\r\n\r\n    onOptionKeyDown(event:KeyboardEvent, option) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n\r\n        let item = <HTMLLIElement> event.currentTarget;\r\n\r\n        switch(event.which) {\r\n            //down\r\n            case 40:\r\n                var nextItem = this.findNextItem(item);\r\n                if (nextItem) {\r\n                    nextItem.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //up\r\n            case 38:\r\n                var prevItem = this.findPrevItem(item);\r\n                if (prevItem) {\r\n                    prevItem.focus();\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //enter\r\n            case 13:\r\n                this.onOptionClick(event, option);\r\n                event.preventDefault();\r\n            break;\r\n        }\r\n    }\r\n\r\n    findNextItem(item) {\r\n        let nextItem = item.nextElementSibling;\r\n\r\n        if (nextItem)\r\n            return DomHandler.hasClass(nextItem, 'ui-state-disabled') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    findPrevItem(item) {\r\n        let prevItem = item.previousElementSibling;\r\n\r\n        if (prevItem)\r\n            return DomHandler.hasClass(prevItem, 'ui-state-disabled') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    getFilteredOptions() {\r\n        let filteredOptions = [];\r\n        if (this.filterValue) {\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                let opt = this.options[i];\r\n                if (this.isItemVisible(opt) && !opt.disabled) {\r\n                    filteredOptions.push(opt);\r\n                }\r\n            }\r\n            return filteredOptions;\r\n        }\r\n        else {\r\n            return this.options;\r\n        }\r\n    }\r\n\r\n    onHeaderCheckboxFocus() {\r\n        this.headerCheckboxFocus = true;\r\n    }\r\n\r\n    onHeaderCheckboxBlur() {\r\n        this.headerCheckboxFocus = false;\r\n    }\r\n\r\n    setDisabledSelectedOptions(){\r\n        if (this.options) {\r\n            this.disabledSelectedOptions = [];\r\n            if (this.value) {\r\n                for (let opt of this.options) {\r\n                    if (opt.disabled && this.isSelected(opt)) {\r\n                        this.disabledSelectedOptions.push(opt.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SharedModule],\r\n    exports: [Listbox, SharedModule],\r\n    declarations: [Listbox]\r\n})\r\nexport class ListboxModule { }\r\n\r\n"]}