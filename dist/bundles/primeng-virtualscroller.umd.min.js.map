{"version":3,"sources":["ng://primeng/virtualscroller/virtualscroller.ts"],"names":["VirtualScroller","el","this","cache","first","trackBy","index","item","onLazyLoad","EventEmitter","_totalRecords","lazyValue","page","Object","defineProperty","prototype","val","Array","from","length","emit","createLazyLoadMetadata","scrollTo","lazy","_value","arr","__spread","i","j","rows","ngAfterContentInit","_this","templates","forEach","getType","itemTemplate","template","loadingItemTemplate","onScrollIndexChange","p","Math","floor","getBlockableElement","nativeElement","children","viewPortViewChild","scrollTop","itemSize","ElementRef","__decorate","Input","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","ViewChild","Output","Component","selector","changeDetection","ChangeDetectionStrategy","Default","VirtualScrollerModule","NgModule","imports","CommonModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"4vCAAAA,EAAA,WAyEI,SAAAA,EAAmBC,GAAAC,KAAAD,GAAAA,EA9BVC,KAAAC,OAAiB,EAIjBD,KAAAE,MAAgB,EAEhBF,KAAAG,QAAoB,SAACC,EAAeC,GAAc,OAAAA,GAUjDL,KAAAM,WAAgC,IAAIC,EAAAA,aAM9CP,KAAAQ,cAAwB,EAIxBR,KAAAS,UAAmB,GAEnBT,KAAAU,KAAe,EA6EnB,OAzEaC,OAAAC,eAAId,EAAAe,UAAA,eAAY,KAAhB,WACL,OAAOb,KAAKQ,mBAEhB,SAAiBM,GACbd,KAAKQ,cAAgBM,EACrBd,KAAKS,UAAYM,MAAMC,KAAK,CAACC,OAAQjB,KAAKQ,gBAC1CR,KAAKM,WAAWY,KAAKlB,KAAKmB,0BAC1BnB,KAAKE,MAAQ,EACbF,KAAKoB,SAAS,oCAGTT,OAAAC,eAAId,EAAAe,UAAA,QAAK,KAAT,WACL,OAAOb,KAAKqB,KAAOrB,KAAKS,UAAYT,KAAKsB,YAE7C,SAAUR,GACN,GAAId,KAAKqB,MACL,GAAIP,EAAK,CAEL,IADA,IAAIS,EAAMvB,KAAKC,MAAKuB,EAAOxB,KAAKS,WAAaM,MAAMC,KAAK,CAACC,OAAQjB,KAAKQ,gBAC7DiB,EAAIzB,KAAKE,MAAOwB,EAAI,EAAGD,EAAKzB,KAAKE,MAAQF,KAAK2B,KAAOF,IAAKC,IAC/DH,EAAIE,GAAKX,EAAIY,GAEjB1B,KAAKS,UAAYc,QAIrBvB,KAAKsB,OAASR,mCAItBhB,EAAAe,UAAAe,mBAAA,WAAA,IAAAC,EAAA7B,KACIA,KAAK8B,UAAUC,SAAQ,SAAC1B,GACpB,OAAOA,EAAK2B,WACR,IAAK,OACDH,EAAKI,aAAe5B,EAAK6B,SAC7B,MAEA,IAAK,cACDL,EAAKM,oBAAsB9B,EAAK6B,SACpC,MAEA,QACIL,EAAKI,aAAe5B,EAAK6B,cAMzCpC,EAAAe,UAAAuB,oBAAA,SAAoBhC,GAChB,IAAIiC,EAAIC,KAAKC,MAAMnC,EAAQJ,KAAK2B,MAC5BU,IAAMrC,KAAKU,OACXV,KAAKU,KAAO2B,EACZrC,KAAKE,MAAQF,KAAKU,KAAOV,KAAK2B,KAC9B3B,KAAKM,WAAWY,KAAKlB,KAAKmB,4BAIlCrB,EAAAe,UAAAM,uBAAA,WACI,MAAO,CACHjB,MAAOF,KAAKE,MACZyB,KAAM3B,KAAK2B,OAInB7B,EAAAe,UAAA2B,oBAAA,WACI,OAAOxC,KAAKD,GAAG0C,cAAcC,SAAS,IAG1C5C,EAAAe,UAAAO,SAAA,SAAShB,GACDJ,KAAK2C,mBAAqB3C,KAAK2C,kBAA8B,YAAK3C,KAAK2C,kBAA8B,WAAEF,gBACvGzC,KAAK2C,kBAA8B,WAAEF,cAAcG,UAAYxC,EAAQJ,KAAK6C,oDAvE7DC,EAAAA,cAxCdC,EAAA,CAARC,EAAAA,wCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,0CAEQD,EAAA,CAARC,EAAAA,4CAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,oCAEQD,EAAA,CAARC,EAAAA,qCAEQD,EAAA,CAARC,EAAAA,uCAEqBD,EAAA,CAArBE,EAAAA,aAAaC,EAAAA,sCAEQH,EAAA,CAArBE,EAAAA,aAAaE,EAAAA,sCAEkBJ,EAAA,CAA/BK,EAAAA,gBAAgBC,EAAAA,gDAEMN,EAAA,CAAtBO,EAAAA,UAAU,qDAEDP,EAAA,CAATQ,EAAAA,2CAgBQR,EAAA,CAARC,EAAAA,0CAWQD,EAAA,CAARC,EAAAA,mCAvDQlD,EAAeiD,EAAA,CAzB3BS,EAAAA,UAAU,CACPC,SAAU,oBACVvB,SAAS,25CAqBTwB,gBAAiBC,EAAAA,wBAAwBC,WAEhC9D,GA/Bb,gBA2JA,SAAA+D,KAAqC,OAAxBA,EAAqBd,EAAA,CALjCe,EAAAA,SAAS,CACNC,QAAS,CAACC,EAAAA,aAAaC,EAAAA,iBACvBC,QAAS,CAACpE,EAAgBqE,EAAAA,aAAaF,EAAAA,iBACvCG,aAAc,CAACtE,MAEN+D","sourcesContent":["import {NgModule,Component,ElementRef,AfterContentInit,Input,Output,ViewChild,EventEmitter,ContentChild,ContentChildren,QueryList,TemplateRef,ChangeDetectionStrategy} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {Header,Footer,PrimeTemplate,SharedModule} from 'primeng/api';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {BlockableUI} from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'p-virtualScroller',\r\n    template:`\r\n        <div [ngClass]=\"'ui-virtualscroller ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div class=\"ui-virtualscroller-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n            </div>\r\n            <div #content class=\"ui-virtualscroller-content ui-widget-content\">\r\n                <ul class=\"ui-virtualscroller-list\">\r\n                    <cdk-virtual-scroll-viewport #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" (scrolledIndexChange)=\"onScrollIndexChange($event)\">\r\n                        <ng-container *cdkVirtualFor=\"let item of value; trackBy: trackBy; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd; \">\r\n                            <li [ngStyle]=\"{'height': itemSize + 'px'}\">\r\n                                <ng-container *ngTemplateOutlet=\"item ? itemTemplate : loadingItemTemplate; context: {$implicit: item, index: i, count: c, first: f, last: l, even: e, odd: o}\"></ng-container>\r\n                            </li>\r\n                        </ng-container>\r\n                    </cdk-virtual-scroll-viewport>\r\n                </ul>\r\n            </div>\r\n            <div class=\"ui-virtualscroller-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\r\n                <ng-content select=\"p-footer\"></ng-content>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class VirtualScroller implements AfterContentInit,BlockableUI {\r\n\r\n    @Input() itemSize: number; \r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n    \r\n    @Input() scrollHeight: any;\r\n\r\n    @Input() lazy: boolean;\r\n\r\n    @Input() cache: boolean = true;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() first: number = 0;\r\n    \r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n                \r\n    @ContentChild(Header) header;\r\n\r\n    @ContentChild(Footer) footer;\r\n    \r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @ViewChild('viewport') viewPortViewChild: ElementRef;\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    itemTemplate: TemplateRef<any>;\r\n\r\n    loadingItemTemplate: TemplateRef<any>;\r\n\r\n    _totalRecords: number = 0;\r\n\r\n    _value: any[];\r\n\r\n    lazyValue: any[] = [];\r\n\r\n    page: number = 0;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n    set totalRecords(val: number) {\r\n        this._totalRecords = val;\r\n        this.lazyValue = Array.from({length: this._totalRecords});\r\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        this.first = 0;\r\n        this.scrollTo(0);\r\n    }\r\n\r\n    @Input() get value(): any[] {\r\n        return this.lazy ? this.lazyValue : this._value;\r\n    }\r\n    set value(val: any[]) {\r\n        if (this.lazy) {\r\n            if (val) {\r\n                let arr = this.cache ? [...this.lazyValue] : Array.from({length: this._totalRecords});\r\n                for (let i = this.first, j = 0; i < (this.first + this.rows); i++, j++) {\r\n                    arr[i] = val[j];\r\n                }\r\n                this.lazyValue = arr;\r\n            }\r\n        }\r\n        else {\r\n            this._value = val;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'item':\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n\r\n                case 'loadingItem':\r\n                    this.loadingItemTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    onScrollIndexChange(index: number) {\r\n        let p = Math.floor(index / this.rows);\r\n        if (p !== this.page) {\r\n            this.page = p;\r\n            this.first = this.page * this.rows;\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows\r\n        };\r\n    }\r\n\r\n    getBlockableElement(): HTMLElementÂ {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    scrollTo(index: number): void {\r\n        if (this.viewPortViewChild && this.viewPortViewChild['elementRef'] && this.viewPortViewChild['elementRef'].nativeElement) {\r\n            this.viewPortViewChild['elementRef'].nativeElement.scrollTop = index * this.itemSize;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,ScrollingModule],\r\n    exports: [VirtualScroller,SharedModule,ScrollingModule],\r\n    declarations: [VirtualScroller]\r\n})\r\nexport class VirtualScrollerModule { }\r\n\r\n"]}