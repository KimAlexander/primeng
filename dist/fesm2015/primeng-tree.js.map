{"version":3,"file":"primeng-tree.js","sources":["ng://primeng/tree/tree.ts","ng://primeng/tree/primeng-tree.ts"],"sourcesContent":["import {NgModule,Component,Input,AfterContentInit,OnDestroy,Output,EventEmitter,OnInit,\r\n    ContentChildren,QueryList,TemplateRef,Inject,ElementRef,forwardRef,ChangeDetectionStrategy} from '@angular/core';\r\nimport {Optional} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {TreeNode} from 'primeng/api';\r\nimport {SharedModule} from 'primeng/api';\r\nimport {PrimeTemplate} from 'primeng/api';\r\nimport {TreeDragDropService} from 'primeng/api';\r\nimport {Subscription} from 'rxjs';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {ObjectUtils} from 'primeng/utils';\r\nimport {DomHandler} from 'primeng/dom';\r\n\r\n@Component({\r\n    selector: 'p-treeNode',\r\n    template: `\r\n        <ng-template [ngIf]=\"node\">\r\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\r\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\r\n            <li *ngIf=\"!tree.horizontal\" role=\"treeitem\" [ngClass]=\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\">\r\n                <div class=\"ui-treenode-content\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\r\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\r\n                    [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\" [attr.tabindex]=\"0\"\r\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\"\r\n                    (keydown)=\"onKeyDown($event)\" [attr.aria-posinset]=\"this.index + 1\" [attr.aria-expanded]=\"this.node.expanded\" [attr.aria-selected]=\"isSelected()\" [attr.aria-label]=\"node.label\">\r\n                    <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\"\r\n                            (click)=\"toggle($event)\"></span\r\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-disabled': node.selectable === false}\">\r\n                        <span class=\"ui-chkbox-icon ui-clickable pi\"\r\n                            [ngClass]=\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\"></span></div></div\r\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\r\n                    ><span class=\"ui-treenode-label ui-corner-all\"\r\n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\r\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\r\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                                <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\r\n                            </span>\r\n                    </span>\r\n                </div>\r\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\r\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.nodeTrackBy\" [node]=\"childNode\" [parentNode]=\"node\"\r\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\r\n                </ul>\r\n            </li>\r\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\r\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\r\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\r\n                            <table class=\"ui-treenode-connector-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </td>\r\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\r\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" tabindex=\"0\"\r\n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\r\n                                (touchend)=\"onNodeTouchEnd()\" (keydown)=\"onNodeKeydown($event)\">\r\n                                <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\r\n                                        (click)=\"toggle($event)\"></span\r\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\r\n                                ><span class=\"ui-treenode-label ui-corner-all\">\r\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\r\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\r\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\r\n                                        </span>\r\n                                </span>\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\r\n                            <div class=\"ui-treenode-children\">\r\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.nodeTrackBy\" [node]=\"childNode\"\r\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </ng-template>\r\n    `\r\n})\r\nexport class UITreeNode implements OnInit {\r\n\r\n    static ICON_CLASS: string = 'ui-treenode-icon ';\r\n\r\n    @Input() node: TreeNode;\r\n\r\n    @Input() parentNode: TreeNode;\r\n\r\n    @Input() root: boolean;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input() firstChild: boolean;\r\n\r\n    @Input() lastChild: boolean;\r\n\r\n    tree: Tree;\r\n\r\n    constructor(@Inject(forwardRef(() => Tree)) tree) {\r\n        this.tree = tree as Tree;\r\n    }\r\n\r\n    draghoverPrev: boolean;\r\n\r\n    draghoverNext: boolean;\r\n\r\n    draghoverNode: boolean\r\n\r\n    ngOnInit() {\r\n        this.node.parent = this.parentNode;\r\n\r\n        if (this.parentNode) {\r\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\r\n        }\r\n    }\r\n\r\n    getIcon() {\r\n        let icon: string;\r\n\r\n        if (this.node.icon)\r\n            icon = this.node.icon;\r\n        else\r\n            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\r\n\r\n        return UITreeNode.ICON_CLASS + ' ' + icon;\r\n    }\r\n\r\n    isLeaf() {\r\n        return this.tree.isNodeLeaf(this.node);\r\n    }\r\n\r\n    toggle(event: Event) {\r\n        if (this.node.expanded)\r\n            this.collapse(event);\r\n        else\r\n            this.expand(event);\r\n    }\r\n\r\n    expand(event: Event) {\r\n        this.node.expanded = true;\r\n        this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\r\n    }\r\n\r\n    collapse(event: Event) {\r\n        this.node.expanded = false;\r\n        this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\r\n    }\r\n\r\n    onNodeClick(event: MouseEvent) {\r\n        this.tree.onNodeClick(event, this.node);\r\n    }\r\n\r\n    onNodeKeydown(event: KeyboardEvent) {\r\n        if (event.which === 13) {\r\n            this.tree.onNodeClick(event, this.node);\r\n        }\r\n    }\r\n\r\n    onNodeTouchEnd() {\r\n        this.tree.onNodeTouchEnd();\r\n    }\r\n\r\n    onNodeRightClick(event: MouseEvent) {\r\n        this.tree.onNodeRightClick(event, this.node);\r\n    }\r\n\r\n    isSelected() {\r\n        return this.tree.isSelected(this.node);\r\n    }\r\n\r\n    onDropPoint(event: Event, position: number) {\r\n        event.preventDefault();\r\n        let dragNode = this.tree.dragNode;\r\n        let dragNodeIndex = this.tree.dragNodeIndex;\r\n        let dragNodeScope = this.tree.dragNodeScope;\r\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;\r\n\r\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\r\n            if (this.tree.validateDrop) {\r\n                this.tree.onNodeDrop.emit({\r\n                    originalEvent: event,\r\n                    dragNode: dragNode,\r\n                    dropNode: this.node,\r\n                    dropIndex: this.index,\r\n                    accept: () => {\r\n                        this.processPointDrop(dragNode, dragNodeIndex, position);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.processPointDrop(dragNode, dragNodeIndex, position);\r\n                this.tree.onNodeDrop.emit({\r\n                    originalEvent: event,\r\n                    dragNode: dragNode,\r\n                    dropNode: this.node,\r\n                    dropIndex: this.index\r\n                });\r\n            }\r\n        }\r\n\r\n        this.draghoverPrev = false;\r\n        this.draghoverNext = false;\r\n    }\r\n\r\n    processPointDrop(dragNode, dragNodeIndex, position) {\r\n        let newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;\r\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\r\n        let dropIndex = this.index;\r\n\r\n        if (position < 0) {\r\n            dropIndex = (this.tree.dragNodeSubNodes === newNodeList) ? ((this.tree.dragNodeIndex > this.index) ? this.index : this.index - 1) : this.index;\r\n            newNodeList.splice(dropIndex, 0, dragNode);\r\n        }\r\n        else {\r\n            dropIndex = newNodeList.length;\r\n            newNodeList.push(dragNode);\r\n        }\r\n\r\n        this.tree.dragDropService.stopDrag({\r\n            node: dragNode,\r\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n            index: dragNodeIndex\r\n        });\r\n    }\r\n\r\n    onDropPointDragOver(event) {\r\n        event.dataTransfer.dropEffect = 'move';\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDropPointDragEnter(event: Event, position: number) {\r\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\r\n            if (position < 0)\r\n                this.draghoverPrev = true;\r\n            else\r\n                this.draghoverNext = true;\r\n        }\r\n    }\r\n\r\n    onDropPointDragLeave(event: Event) {\r\n        this.draghoverPrev = false;\r\n        this.draghoverNext = false;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\r\n            event.dataTransfer.setData(\"text\", \"data\");\r\n\r\n            this.tree.dragDropService.startDrag({\r\n                tree: this,\r\n                node: this.node,\r\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n                index: this.index,\r\n                scope: this.tree.draggableScope\r\n            });\r\n        }\r\n        else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDragStop(event) {\r\n        this.tree.dragDropService.stopDrag({\r\n            node: this.node,\r\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n            index: this.index\r\n        });\r\n    }\r\n\r\n    onDropNodeDragOver(event) {\r\n        event.dataTransfer.dropEffect = 'move';\r\n        if (this.tree.droppableNodes) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    onDropNode(event) {\r\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            let dragNode = this.tree.dragNode;\r\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\r\n                if (this.tree.validateDrop) {\r\n                    this.tree.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: this.node,\r\n                        index: this.index,\r\n                        accept: () => {\r\n                            this.processNodeDrop(dragNode);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.processNodeDrop(dragNode);\r\n                    this.tree.onNodeDrop.emit({\r\n                        originalEvent: event,\r\n                        dragNode: dragNode,\r\n                        dropNode: this.node,\r\n                        index: this.index\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.draghoverNode = false;\r\n    }\r\n\r\n    processNodeDrop(dragNode) {\r\n        let dragNodeIndex = this.tree.dragNodeIndex;\r\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\r\n\r\n        if (this.node.children)\r\n            this.node.children.push(dragNode);\r\n        else\r\n            this.node.children = [dragNode];\r\n\r\n        this.tree.dragDropService.stopDrag({\r\n            node: dragNode,\r\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\r\n            index: this.tree.dragNodeIndex\r\n        });\r\n\r\n\r\n    }\r\n\r\n    onDropNodeDragEnter(event) {\r\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\r\n            this.draghoverNode = true;\r\n        }\r\n    }\r\n\r\n    onDropNodeDragLeave(event) {\r\n        if (this.tree.droppableNodes) {\r\n            let rect = event.currentTarget.getBoundingClientRect();\r\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\r\n               this.draghoverNode = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyDown(event: KeyboardEvent) {\r\n        const nodeElement = (<HTMLDivElement> event.target).parentElement.parentElement;\r\n\r\n        if (nodeElement.nodeName !== 'P-TREENODE') {\r\n            return;\r\n        }\r\n\r\n        switch (event.which) {\r\n            //down arrow\r\n            case 40:\r\n                const listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\r\n                if (listElement && listElement.children.length > 0) {\r\n                    this.focusNode(listElement.children[0]);\r\n                }\r\n                else {\r\n                    const nextNodeElement = nodeElement.nextElementSibling;\r\n                    if (nextNodeElement) {\r\n                        this.focusNode(nextNodeElement);\r\n                    }\r\n                    else {\r\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\r\n                        if (nextSiblingAncestor) {\r\n                            this.focusNode(nextSiblingAncestor);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //up arrow\r\n            case 38:\r\n                if (nodeElement.previousElementSibling) {\r\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\r\n                }\r\n                else {\r\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n                    if (parentNodeElement) {\r\n                        this.focusNode(parentNodeElement);\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //right arrow\r\n            case 39:\r\n                if (!this.node.expanded) {\r\n                    this.expand(event);\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left arrow\r\n            case 37:\r\n                if (this.node.expanded) {\r\n                    this.collapse(event);\r\n                }\r\n                else {\r\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n                    if (parentNodeElement) {\r\n                        this.focusNode(parentNodeElement);\r\n                    }\r\n                }\r\n\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //enter\r\n            case 13:\r\n                this.tree.onNodeClick(event, this.node);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            default:\r\n                //no op\r\n            break;\r\n        }\r\n    }\r\n\r\n    findNextSiblingOfAncestor(nodeElement) {\r\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\r\n        if (parentNodeElement) {\r\n            if (parentNodeElement.nextElementSibling)\r\n                return parentNodeElement.nextElementSibling;\r\n            else\r\n                return this.findNextSiblingOfAncestor(parentNodeElement);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findLastVisibleDescendant(nodeElement) {\r\n        const childrenListElement = nodeElement.children[0].children[1];\r\n        if (childrenListElement && childrenListElement.children.length > 0) {\r\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\r\n\r\n            return this.findLastVisibleDescendant(lastChildElement);\r\n        }\r\n        else {\r\n            return nodeElement;\r\n        }\r\n    }\r\n\r\n    getParentNodeElement(nodeElement) {\r\n        const parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\r\n\r\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\r\n    }\r\n\r\n    focusNode(element) {\r\n        if (this.tree.droppableNodes)\r\n            element.children[1].children[0].focus();\r\n        else\r\n            element.children[0].children[0].focus();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tree',\r\n    template: `\r\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover,'ui-tree-loading': loading}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\r\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\r\n            <div class=\"ui-tree-loading-mask ui-widget-overlay\" *ngIf=\"loading\"></div>\r\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\r\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <div *ngIf=\"filter\" class=\"ui-tree-filter-container\">\r\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\r\n                    (keydown.enter)=\"$event.preventDefault()\" (input)=\"onFilter($event)\">\r\n                    <span class=\"ui-tree-filter-icon pi pi-search\"></span>\r\n            </div>\r\n            <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\r\n                <p-treeNode *ngFor=\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: nodeTrackBy\" [node]=\"node\"\r\n                [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\r\n            </ul>\r\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\r\n        </div>\r\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\r\n            <div class=\"ui-tree-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\r\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\r\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <table *ngIf=\"value&&value[0]\">\r\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\r\n            </table>\r\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class Tree implements OnInit,AfterContentInit,OnDestroy,BlockableUI {\r\n\r\n    @Input() value: TreeNode[];\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Input() selection: any;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onNodeDrop: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() layout: string = 'vertical';\r\n\r\n    @Input() draggableScope: any;\r\n\r\n    @Input() droppableScope: any;\r\n\r\n    @Input() draggableNodes: boolean;\r\n\r\n    @Input() droppableNodes: boolean;\r\n\r\n    @Input() metaKeySelection: boolean = true;\r\n\r\n    @Input() propagateSelectionUp: boolean = true;\r\n\r\n    @Input() propagateSelectionDown: boolean = true;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() emptyMessage: string = 'No records found';\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() validateDrop: boolean;\r\n\r\n    @Input() filter: boolean;\r\n\r\n    @Input() filterBy: string = 'label';\r\n\r\n    @Input() filterMode: string = 'lenient';\r\n\r\n    @Input() filterPlaceholder: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() nodeTrackBy: Function = (index: number, item: any) => item;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    public templateMap: any;\r\n\r\n    public nodeTouched: boolean;\r\n\r\n    public dragNodeTree: Tree;\r\n\r\n    public dragNode: TreeNode;\r\n\r\n    public dragNodeSubNodes: TreeNode[];\r\n\r\n    public dragNodeIndex: number;\r\n\r\n    public dragNodeScope: any;\r\n\r\n    public dragHover: boolean;\r\n\r\n    public dragStartSubscription: Subscription;\r\n\r\n    public dragStopSubscription: Subscription;\r\n\r\n    public filteredNodes: TreeNode[];\r\n\r\n    constructor(public el: ElementRef, @Optional() public dragDropService: TreeDragDropService) {}\r\n\r\n    ngOnInit() {\r\n        if (this.droppableNodes) {\r\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(\r\n              event => {\r\n                this.dragNodeTree = event.tree;\r\n                this.dragNode = event.node;\r\n                this.dragNodeSubNodes = event.subNodes;\r\n                this.dragNodeIndex = event.index;\r\n                this.dragNodeScope = event.scope;\r\n            });\r\n\r\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(\r\n              event => {\r\n                this.dragNodeTree = null;\r\n                this.dragNode = null;\r\n                this.dragNodeSubNodes = null;\r\n                this.dragNodeIndex = null;\r\n                this.dragNodeScope = null;\r\n                this.dragHover = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    get horizontal(): boolean {\r\n        return this.layout == 'horizontal';\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        if (this.templates.length) {\r\n            this.templateMap = {};\r\n        }\r\n\r\n        this.templates.forEach((item) => {\r\n            this.templateMap[item.name] = item.template;\r\n        });\r\n    }\r\n\r\n    onNodeClick(event, node: TreeNode) {\r\n        let eventTarget = (<Element> event.target);\r\n\r\n        if (DomHandler.hasClass(eventTarget, 'ui-tree-toggler')) {\r\n            return;\r\n        }\r\n        else if (this.selectionMode) {\r\n            if (node.selectable === false) {\r\n                return;\r\n            }\r\n\r\n            if (this.hasFilteredNodes()) {\r\n                node = this.getNodeWithKey(node.key, this.value);\r\n\r\n                if (!node) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let index = this.findIndexInSelection(node);\r\n            let selected = (index >= 0);\r\n\r\n            if (this.isCheckboxSelectionMode()) {\r\n                if (selected) {\r\n                    if (this.propagateSelectionDown)\r\n                        this.propagateDown(node, false);\r\n                    else\r\n                        this.selection = this.selection.filter((val,i) => i!=index);\r\n\r\n                    if (this.propagateSelectionUp && node.parent) {\r\n                        this.propagateUp(node.parent, false);\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                }\r\n                else {\r\n                    if (this.propagateSelectionDown)\r\n                        this.propagateDown(node, true);\r\n                    else\r\n                        this.selection = [...this.selection||[],node];\r\n\r\n                    if (this.propagateSelectionUp && node.parent) {\r\n                        this.propagateUp(node.parent, true);\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                }\r\n            }\r\n            else {\r\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\r\n\r\n                if (metaSelection) {\r\n                    let metaKey = (event.metaKey||event.ctrlKey);\r\n\r\n                    if (selected && metaKey) {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this.selectionChange.emit(null);\r\n                        }\r\n                        else {\r\n                            this.selection = this.selection.filter((val,i) => i!=index);\r\n                            this.selectionChange.emit(this.selection);\r\n                        }\r\n\r\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                    }\r\n                    else {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this.selectionChange.emit(node);\r\n                        }\r\n                        else if (this.isMultipleSelectionMode()) {\r\n                            this.selection = (!metaKey) ? [] : this.selection||[];\r\n                            this.selection = [...this.selection,node];\r\n                            this.selectionChange.emit(this.selection);\r\n                        }\r\n\r\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        if (selected) {\r\n                            this.selection = null;\r\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                        }\r\n                        else {\r\n                            this.selection = node;\r\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (selected) {\r\n                            this.selection = this.selection.filter((val,i) => i!=index);\r\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\r\n                        }\r\n                        else {\r\n                            this.selection = [...this.selection||[],node];\r\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\r\n                        }\r\n                    }\r\n\r\n                    this.selectionChange.emit(this.selection);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.nodeTouched = false;\r\n    }\r\n\r\n    onNodeTouchEnd() {\r\n        this.nodeTouched = true;\r\n    }\r\n\r\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\r\n        if (this.contextMenu) {\r\n            let eventTarget = (<Element> event.target);\r\n\r\n            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\r\n                return;\r\n            }\r\n            else {\r\n                let index = this.findIndexInSelection(node);\r\n                let selected = (index >= 0);\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode())\r\n                        this.selectionChange.emit(node);\r\n                    else\r\n                        this.selectionChange.emit([node]);\r\n                }\r\n\r\n                this.contextMenu.show(event);\r\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\r\n            }\r\n        }\r\n    }\r\n\r\n    findIndexInSelection(node: TreeNode) {\r\n        let index: number = -1;\r\n\r\n        if (this.selectionMode && this.selection) {\r\n            if (this.isSingleSelectionMode()) {\r\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\r\n                index = areNodesEqual ? 0 : - 1;\r\n            }\r\n            else {\r\n                for(let i = 0; i  < this.selection.length; i++) {\r\n                    let selectedNode = this.selection[i];\r\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\r\n                    if (areNodesEqual) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    syncNodeOption(node, parentNodes, option, value?: any) {\r\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\r\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\r\n        if (_node) {\r\n            _node[option] = value||node[option];\r\n        }\r\n    }\r\n\r\n    hasFilteredNodes() {\r\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\r\n    }\r\n\r\n    getNodeWithKey(key: string, nodes: TreeNode[]) {\r\n        for (let node of nodes) {\r\n            if (node.key === key) {\r\n                return node;\r\n            }\r\n\r\n            if (node.children) {\r\n                let matchedNode = this.getNodeWithKey(key, node.children);\r\n                if (matchedNode) {\r\n                    return matchedNode;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    propagateUp(node: TreeNode, select: boolean) {\r\n        if (node.children && node.children.length) {\r\n            let selectedCount: number = 0;\r\n            let childPartialSelected: boolean = false;\r\n            for(let child of node.children) {\r\n                if (this.isSelected(child)) {\r\n                    selectedCount++;\r\n                }\r\n                else if (child.partialSelected) {\r\n                    childPartialSelected = true;\r\n                }\r\n            }\r\n\r\n            if (select && selectedCount == node.children.length) {\r\n                this.selection = [...this.selection||[],node];\r\n                node.partialSelected = false;\r\n            }\r\n            else {\r\n                if (!select) {\r\n                    let index = this.findIndexInSelection(node);\r\n                    if (index >= 0) {\r\n                        this.selection = this.selection.filter((val,i) => i!=index);\r\n                    }\r\n                }\r\n\r\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\r\n                    node.partialSelected = true;\r\n                else\r\n                    node.partialSelected = false;\r\n            }\r\n\r\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\r\n        }\r\n\r\n        let parent = node.parent;\r\n        if (parent) {\r\n            this.propagateUp(parent, select);\r\n        }\r\n    }\r\n\r\n    propagateDown(node: TreeNode, select: boolean) {\r\n        let index = this.findIndexInSelection(node);\r\n\r\n        if (select && index == -1) {\r\n            this.selection = [...this.selection||[],node];\r\n        }\r\n        else if (!select && index > -1) {\r\n            this.selection = this.selection.filter((val,i) => i!=index);\r\n        }\r\n\r\n        node.partialSelected = false;\r\n\r\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\r\n\r\n        if (node.children && node.children.length) {\r\n            for(let child of node.children) {\r\n                this.propagateDown(child, select);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelected(node: TreeNode) {\r\n        return this.findIndexInSelection(node) != -1;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'multiple';\r\n    }\r\n\r\n    isCheckboxSelectionMode() {\r\n        return this.selectionMode && this.selectionMode == 'checkbox';\r\n    }\r\n\r\n    isNodeLeaf(node) {\r\n        return node.leaf == false ? false : !(node.children && node.children.length);\r\n    }\r\n\r\n    getRootNode() {\r\n        return this.filteredNodes ? this.filteredNodes : this.value;\r\n    }\r\n\r\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\r\n        if (this.templateMap)\r\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\r\n        else\r\n            return null;\r\n    }\r\n\r\n    onDragOver(event) {\r\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\r\n            event.dataTransfer.dropEffect = 'move';\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onDrop(event) {\r\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\r\n            event.preventDefault();\r\n            let dragNode = this.dragNode;\r\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\r\n                let dragNodeIndex = this.dragNodeIndex;\r\n                this.dragNodeSubNodes.splice(dragNodeIndex, 1);\r\n                this.value = this.value||[];\r\n                this.value.push(dragNode);\r\n\r\n                this.dragDropService.stopDrag({\r\n                    node: dragNode\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\r\n            this.dragHover = true;\r\n        }\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        if (this.droppableNodes) {\r\n            let rect = event.currentTarget.getBoundingClientRect();\r\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\r\n               this.dragHover = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean {\r\n        if (!dragNode) {\r\n            //prevent random html elements to be dragged\r\n            return false;\r\n        }\r\n        else if (this.isValidDragScope(dragNodeScope)) {\r\n            let allow: boolean = true;\r\n            if (dropNode) {\r\n                if (dragNode === dropNode) {\r\n                    allow = false;\r\n                }\r\n                else {\r\n                    let parent = dropNode.parent;\r\n                    while(parent != null) {\r\n                        if (parent === dragNode) {\r\n                            allow = false;\r\n                            break;\r\n                        }\r\n                        parent = parent.parent;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return allow;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isValidDragScope(dragScope: any): boolean {\r\n        let dropScope = this.droppableScope;\r\n\r\n        if (dropScope) {\r\n            if (typeof dropScope === 'string') {\r\n                if (typeof dragScope === 'string')\r\n                    return dropScope === dragScope;\r\n                else if (dragScope instanceof Array)\r\n                    return (<Array<any>>dragScope).indexOf(dropScope) != -1;\r\n            }\r\n            else if (dropScope instanceof Array) {\r\n                if (typeof dragScope === 'string') {\r\n                    return (<Array<any>>dropScope).indexOf(dragScope) != -1;\r\n                }\r\n                else if (dragScope instanceof Array) {\r\n                    for(let s of dropScope) {\r\n                        for(let ds of dragScope) {\r\n                            if (s === ds) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onFilter(event) {\r\n        let filterValue = event.target.value;\r\n        if (filterValue === '') {\r\n            this.filteredNodes = null;\r\n        }\r\n        else {\r\n            this.filteredNodes = [];\r\n            const searchFields: string[] = this.filterBy.split(',');\r\n            const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\r\n            const isStrictMode = this.filterMode === 'strict';\r\n            for(let node of this.value) {\r\n                let copyNode = {...node};\r\n                let paramsWithoutNode = {searchFields, filterText, isStrictMode};\r\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\r\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\r\n                    this.filteredNodes.push(copyNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    findFilteredNodes(node, paramsWithoutNode) {\r\n        if (node) {\r\n            let matched = false;\r\n            if (node.children) {\r\n                let childNodes = [...node.children];\r\n                node.children = [];\r\n                for (let childNode of childNodes) {\r\n                    let copyChildNode = {...childNode};\r\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\r\n                        matched = true;\r\n                        node.children.push(copyChildNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (matched) {\r\n                node.expanded = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isFilterMatched(node, {searchFields, filterText, isStrictMode}) {\r\n        let matched = false;\r\n        for(let field of searchFields) {\r\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\r\n            if (fieldValue.indexOf(filterText) > -1) {\r\n                matched = true;\r\n            }\r\n        }\r\n\r\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\r\n            matched = this.findFilteredNodes(node, {searchFields, filterText, isStrictMode}) || matched;\r\n        }\r\n\r\n        return matched;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElementÂ {\r\n      return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.dragStartSubscription) {\r\n            this.dragStartSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.dragStopSubscription) {\r\n            this.dragStopSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Tree,SharedModule],\r\n    declarations: [Tree,UITreeNode]\r\n})\r\nexport class TreeModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}